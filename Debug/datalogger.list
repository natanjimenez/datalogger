
datalogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004374  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08004480  08004480  00014480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004628  08004628  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  08004628  08004628  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004628  08004628  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004628  08004628  00014628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800462c  0800462c  0001462c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08004630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  200000d0  08004700  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08004700  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef36  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002258  00000000  00000000  0002f02f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  00031288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e18  00000000  00000000  000321a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a18  00000000  00000000  00032fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fcd5  00000000  00000000  0004b9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091074  00000000  00000000  0005b6ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ec721  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004388  00000000  00000000  000ec774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000d0 	.word	0x200000d0
 8000128:	00000000 	.word	0x00000000
 800012c:	08004468 	.word	0x08004468

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d4 	.word	0x200000d4
 8000148:	08004468 	.word	0x08004468

0800014c <ADC_Select_CH0>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void ADC_Select_CH0(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]
	  sConfig.Channel = ADC_CHANNEL_0;
 800015c:	2300      	movs	r3, #0
 800015e:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8000160:	2301      	movs	r3, #1
 8000162:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000164:	2307      	movs	r3, #7
 8000166:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000168:	1d3b      	adds	r3, r7, #4
 800016a:	4619      	mov	r1, r3
 800016c:	4805      	ldr	r0, [pc, #20]	; (8000184 <ADC_Select_CH0+0x38>)
 800016e:	f001 fa07 	bl	8001580 <HAL_ADC_ConfigChannel>
 8000172:	4603      	mov	r3, r0
 8000174:	2b00      	cmp	r3, #0
 8000176:	d001      	beq.n	800017c <ADC_Select_CH0+0x30>
	  {
	    Error_Handler();
 8000178:	f000 fca2 	bl	8000ac0 <Error_Handler>
	  }
}
 800017c:	bf00      	nop
 800017e:	3710      	adds	r7, #16
 8000180:	46bd      	mov	sp, r7
 8000182:	bd80      	pop	{r7, pc}
 8000184:	200001a8 	.word	0x200001a8

08000188 <ADC_Select_CH1>:
void ADC_Select_CH1(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b084      	sub	sp, #16
 800018c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800018e:	1d3b      	adds	r3, r7, #4
 8000190:	2200      	movs	r2, #0
 8000192:	601a      	str	r2, [r3, #0]
 8000194:	605a      	str	r2, [r3, #4]
 8000196:	609a      	str	r2, [r3, #8]
	  sConfig.Channel = ADC_CHANNEL_1;
 8000198:	2301      	movs	r3, #1
 800019a:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80001a0:	2307      	movs	r3, #7
 80001a2:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	; (80001c0 <ADC_Select_CH1+0x38>)
 80001aa:	f001 f9e9 	bl	8001580 <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <ADC_Select_CH1+0x30>
	  {
	    Error_Handler();
 80001b4:	f000 fc84 	bl	8000ac0 <Error_Handler>
	  }
}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	200001a8 	.word	0x200001a8

080001c4 <ADC_Select_CH4>:
void ADC_Select_CH4(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b084      	sub	sp, #16
 80001c8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80001ca:	1d3b      	adds	r3, r7, #4
 80001cc:	2200      	movs	r2, #0
 80001ce:	601a      	str	r2, [r3, #0]
 80001d0:	605a      	str	r2, [r3, #4]
 80001d2:	609a      	str	r2, [r3, #8]
	  sConfig.Channel = ADC_CHANNEL_4;
 80001d4:	2304      	movs	r3, #4
 80001d6:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 80001d8:	2301      	movs	r3, #1
 80001da:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80001dc:	2307      	movs	r3, #7
 80001de:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001e0:	1d3b      	adds	r3, r7, #4
 80001e2:	4619      	mov	r1, r3
 80001e4:	4805      	ldr	r0, [pc, #20]	; (80001fc <ADC_Select_CH4+0x38>)
 80001e6:	f001 f9cb 	bl	8001580 <HAL_ADC_ConfigChannel>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d001      	beq.n	80001f4 <ADC_Select_CH4+0x30>
	  {
	    Error_Handler();
 80001f0:	f000 fc66 	bl	8000ac0 <Error_Handler>
	  }
}
 80001f4:	bf00      	nop
 80001f6:	3710      	adds	r7, #16
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	200001a8 	.word	0x200001a8

08000200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000204:	f000 fe7e 	bl	8000f04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000208:	f000 f902 	bl	8000410 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020c:	f000 fa58 	bl	80006c0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000210:	f000 f956 	bl	80004c0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000214:	f000 fa00 	bl	8000618 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000218:	f000 fa28 	bl	800066c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 800021c:	f000 f9ae 	bl	800057c <MX_TIM3_Init>
  MX_SPI1_Init();
 8000220:	f000 f976 	bl	8000510 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart3, (uint8_t *) "Inicio", 6, 100);
 8000224:	2364      	movs	r3, #100	; 0x64
 8000226:	2206      	movs	r2, #6
 8000228:	4963      	ldr	r1, [pc, #396]	; (80003b8 <main+0x1b8>)
 800022a:	4864      	ldr	r0, [pc, #400]	; (80003bc <main+0x1bc>)
 800022c:	f003 f8ab 	bl	8003386 <HAL_UART_Transmit>
  HAL_Delay(100);
 8000230:	2064      	movs	r0, #100	; 0x64
 8000232:	f000 fec9 	bl	8000fc8 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch(estado)
 8000236:	4b62      	ldr	r3, [pc, #392]	; (80003c0 <main+0x1c0>)
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	2b02      	cmp	r3, #2
 800023c:	f000 80b3 	beq.w	80003a6 <main+0x1a6>
 8000240:	2b02      	cmp	r3, #2
 8000242:	f300 80b3 	bgt.w	80003ac <main+0x1ac>
 8000246:	2b00      	cmp	r3, #0
 8000248:	d002      	beq.n	8000250 <main+0x50>
 800024a:	2b01      	cmp	r3, #1
 800024c:	d03a      	beq.n	80002c4 <main+0xc4>
		  break;
	  case 2:
		  gestion_led();
	  	  break;
	  default:
	  	  break;
 800024e:	e0ad      	b.n	80003ac <main+0x1ac>
		  gestion_led();
 8000250:	f000 faa4 	bl	800079c <gestion_led>
		  if(mensaje_iniciar==0)
 8000254:	4b5b      	ldr	r3, [pc, #364]	; (80003c4 <main+0x1c4>)
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	f040 80a9 	bne.w	80003b0 <main+0x1b0>
			  HAL_UART_Transmit(&huart2, (uint8_t*)msg1, 31, 500);
 800025e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000262:	221f      	movs	r2, #31
 8000264:	4958      	ldr	r1, [pc, #352]	; (80003c8 <main+0x1c8>)
 8000266:	4859      	ldr	r0, [pc, #356]	; (80003cc <main+0x1cc>)
 8000268:	f003 f88d 	bl	8003386 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 4, 500);
 800026c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000270:	2204      	movs	r2, #4
 8000272:	4957      	ldr	r1, [pc, #348]	; (80003d0 <main+0x1d0>)
 8000274:	4855      	ldr	r0, [pc, #340]	; (80003cc <main+0x1cc>)
 8000276:	f003 f886 	bl	8003386 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, (uint8_t*)msg2, 30, 500);
 800027a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800027e:	221e      	movs	r2, #30
 8000280:	4954      	ldr	r1, [pc, #336]	; (80003d4 <main+0x1d4>)
 8000282:	4852      	ldr	r0, [pc, #328]	; (80003cc <main+0x1cc>)
 8000284:	f003 f87f 	bl	8003386 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 4, 500);
 8000288:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800028c:	2204      	movs	r2, #4
 800028e:	4950      	ldr	r1, [pc, #320]	; (80003d0 <main+0x1d0>)
 8000290:	484e      	ldr	r0, [pc, #312]	; (80003cc <main+0x1cc>)
 8000292:	f003 f878 	bl	8003386 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, (uint8_t*)msg3, 30, 500);
 8000296:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800029a:	221e      	movs	r2, #30
 800029c:	494e      	ldr	r1, [pc, #312]	; (80003d8 <main+0x1d8>)
 800029e:	484b      	ldr	r0, [pc, #300]	; (80003cc <main+0x1cc>)
 80002a0:	f003 f871 	bl	8003386 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 4, 500);
 80002a4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80002a8:	2204      	movs	r2, #4
 80002aa:	4949      	ldr	r1, [pc, #292]	; (80003d0 <main+0x1d0>)
 80002ac:	4847      	ldr	r0, [pc, #284]	; (80003cc <main+0x1cc>)
 80002ae:	f003 f86a 	bl	8003386 <HAL_UART_Transmit>
			  HAL_UART_Receive_IT(&huart2,(uint8_t*) msgrx, 2);
 80002b2:	2202      	movs	r2, #2
 80002b4:	4949      	ldr	r1, [pc, #292]	; (80003dc <main+0x1dc>)
 80002b6:	4845      	ldr	r0, [pc, #276]	; (80003cc <main+0x1cc>)
 80002b8:	f003 f8f7 	bl	80034aa <HAL_UART_Receive_IT>
			  mensaje_iniciar=1;
 80002bc:	4b41      	ldr	r3, [pc, #260]	; (80003c4 <main+0x1c4>)
 80002be:	2201      	movs	r2, #1
 80002c0:	701a      	strb	r2, [r3, #0]
		  break;
 80002c2:	e075      	b.n	80003b0 <main+0x1b0>
		  gestion_led();
 80002c4:	f000 fa6a 	bl	800079c <gestion_led>
		  conversion_adc();
 80002c8:	f000 fb6c 	bl	80009a4 <conversion_adc>
		  HAL_TIM_Base_Start_IT(&htim3);
 80002cc:	4844      	ldr	r0, [pc, #272]	; (80003e0 <main+0x1e0>)
 80002ce:	f002 fc63 	bl	8002b98 <HAL_TIM_Base_Start_IT>
		  if(mostrar && conv_adc_rdy)
 80002d2:	4b44      	ldr	r3, [pc, #272]	; (80003e4 <main+0x1e4>)
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d06c      	beq.n	80003b4 <main+0x1b4>
 80002da:	4b43      	ldr	r3, [pc, #268]	; (80003e8 <main+0x1e8>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d068      	beq.n	80003b4 <main+0x1b4>
			  HAL_UART_Transmit(&huart3, (uint8_t*)buffer, sprintf(buffer, "%d", voltaje), 500);
 80002e2:	4b42      	ldr	r3, [pc, #264]	; (80003ec <main+0x1ec>)
 80002e4:	881b      	ldrh	r3, [r3, #0]
 80002e6:	461a      	mov	r2, r3
 80002e8:	4941      	ldr	r1, [pc, #260]	; (80003f0 <main+0x1f0>)
 80002ea:	4842      	ldr	r0, [pc, #264]	; (80003f4 <main+0x1f4>)
 80002ec:	f003 fc66 	bl	8003bbc <siprintf>
 80002f0:	4603      	mov	r3, r0
 80002f2:	b29a      	uxth	r2, r3
 80002f4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80002f8:	493e      	ldr	r1, [pc, #248]	; (80003f4 <main+0x1f4>)
 80002fa:	4830      	ldr	r0, [pc, #192]	; (80003bc <main+0x1bc>)
 80002fc:	f003 f843 	bl	8003386 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart3, (uint8_t*)"---", 3, 500);
 8000300:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000304:	2203      	movs	r2, #3
 8000306:	493c      	ldr	r1, [pc, #240]	; (80003f8 <main+0x1f8>)
 8000308:	482c      	ldr	r0, [pc, #176]	; (80003bc <main+0x1bc>)
 800030a:	f003 f83c 	bl	8003386 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart3, (uint8_t*)buffer, sprintf(buffer, "%d", corriente), 500);
 800030e:	4b3b      	ldr	r3, [pc, #236]	; (80003fc <main+0x1fc>)
 8000310:	881b      	ldrh	r3, [r3, #0]
 8000312:	461a      	mov	r2, r3
 8000314:	4936      	ldr	r1, [pc, #216]	; (80003f0 <main+0x1f0>)
 8000316:	4837      	ldr	r0, [pc, #220]	; (80003f4 <main+0x1f4>)
 8000318:	f003 fc50 	bl	8003bbc <siprintf>
 800031c:	4603      	mov	r3, r0
 800031e:	b29a      	uxth	r2, r3
 8000320:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000324:	4933      	ldr	r1, [pc, #204]	; (80003f4 <main+0x1f4>)
 8000326:	4825      	ldr	r0, [pc, #148]	; (80003bc <main+0x1bc>)
 8000328:	f003 f82d 	bl	8003386 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart3, (uint8_t*)"---", 3, 500);
 800032c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000330:	2203      	movs	r2, #3
 8000332:	4931      	ldr	r1, [pc, #196]	; (80003f8 <main+0x1f8>)
 8000334:	4821      	ldr	r0, [pc, #132]	; (80003bc <main+0x1bc>)
 8000336:	f003 f826 	bl	8003386 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart3, (uint8_t*)buffer, sprintf(buffer, "%d", temperatura), 500);
 800033a:	4b31      	ldr	r3, [pc, #196]	; (8000400 <main+0x200>)
 800033c:	881b      	ldrh	r3, [r3, #0]
 800033e:	461a      	mov	r2, r3
 8000340:	492b      	ldr	r1, [pc, #172]	; (80003f0 <main+0x1f0>)
 8000342:	482c      	ldr	r0, [pc, #176]	; (80003f4 <main+0x1f4>)
 8000344:	f003 fc3a 	bl	8003bbc <siprintf>
 8000348:	4603      	mov	r3, r0
 800034a:	b29a      	uxth	r2, r3
 800034c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000350:	4928      	ldr	r1, [pc, #160]	; (80003f4 <main+0x1f4>)
 8000352:	481a      	ldr	r0, [pc, #104]	; (80003bc <main+0x1bc>)
 8000354:	f003 f817 	bl	8003386 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 4, 500);
 8000358:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800035c:	2204      	movs	r2, #4
 800035e:	491c      	ldr	r1, [pc, #112]	; (80003d0 <main+0x1d0>)
 8000360:	4816      	ldr	r0, [pc, #88]	; (80003bc <main+0x1bc>)
 8000362:	f003 f810 	bl	8003386 <HAL_UART_Transmit>
			  mostrar=0;
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <main+0x1e4>)
 8000368:	2200      	movs	r2, #0
 800036a:	701a      	strb	r2, [r3, #0]
			  valores_medidos++;
 800036c:	4b25      	ldr	r3, [pc, #148]	; (8000404 <main+0x204>)
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	3301      	adds	r3, #1
 8000372:	b2da      	uxtb	r2, r3
 8000374:	4b23      	ldr	r3, [pc, #140]	; (8000404 <main+0x204>)
 8000376:	701a      	strb	r2, [r3, #0]
			  if(valores_medidos>valores_a_medir)
 8000378:	4b22      	ldr	r3, [pc, #136]	; (8000404 <main+0x204>)
 800037a:	781a      	ldrb	r2, [r3, #0]
 800037c:	4b22      	ldr	r3, [pc, #136]	; (8000408 <main+0x208>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	429a      	cmp	r2, r3
 8000382:	d917      	bls.n	80003b4 <main+0x1b4>
				  valores_medidos=0;
 8000384:	4b1f      	ldr	r3, [pc, #124]	; (8000404 <main+0x204>)
 8000386:	2200      	movs	r2, #0
 8000388:	701a      	strb	r2, [r3, #0]
				  valores_a_medir=0;
 800038a:	4b1f      	ldr	r3, [pc, #124]	; (8000408 <main+0x208>)
 800038c:	2200      	movs	r2, #0
 800038e:	701a      	strb	r2, [r3, #0]
				  estado=2;
 8000390:	4b0b      	ldr	r3, [pc, #44]	; (80003c0 <main+0x1c0>)
 8000392:	2202      	movs	r2, #2
 8000394:	701a      	strb	r2, [r3, #0]
				  HAL_UART_Transmit(&huart3, (uint8_t*)"FIN", 3, 500);
 8000396:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800039a:	2203      	movs	r2, #3
 800039c:	491b      	ldr	r1, [pc, #108]	; (800040c <main+0x20c>)
 800039e:	4807      	ldr	r0, [pc, #28]	; (80003bc <main+0x1bc>)
 80003a0:	f002 fff1 	bl	8003386 <HAL_UART_Transmit>
		  break;
 80003a4:	e006      	b.n	80003b4 <main+0x1b4>
		  gestion_led();
 80003a6:	f000 f9f9 	bl	800079c <gestion_led>
	  	  break;
 80003aa:	e004      	b.n	80003b6 <main+0x1b6>
	  	  break;
 80003ac:	bf00      	nop
 80003ae:	e742      	b.n	8000236 <main+0x36>
		  break;
 80003b0:	bf00      	nop
 80003b2:	e740      	b.n	8000236 <main+0x36>
		  break;
 80003b4:	bf00      	nop
	  switch(estado)
 80003b6:	e73e      	b.n	8000236 <main+0x36>
 80003b8:	08004480 	.word	0x08004480
 80003bc:	20000120 	.word	0x20000120
 80003c0:	200000ec 	.word	0x200000ec
 80003c4:	2000010f 	.word	0x2000010f
 80003c8:	20000000 	.word	0x20000000
 80003cc:	20000238 	.word	0x20000238
 80003d0:	08004488 	.word	0x08004488
 80003d4:	20000020 	.word	0x20000020
 80003d8:	20000040 	.word	0x20000040
 80003dc:	20000110 	.word	0x20000110
 80003e0:	20000160 	.word	0x20000160
 80003e4:	2000010a 	.word	0x2000010a
 80003e8:	2000010b 	.word	0x2000010b
 80003ec:	200001dc 	.word	0x200001dc
 80003f0:	0800448c 	.word	0x0800448c
 80003f4:	20000100 	.word	0x20000100
 80003f8:	08004490 	.word	0x08004490
 80003fc:	20000284 	.word	0x20000284
 8000400:	20000278 	.word	0x20000278
 8000404:	2000010d 	.word	0x2000010d
 8000408:	2000010e 	.word	0x2000010e
 800040c:	08004494 	.word	0x08004494

08000410 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b094      	sub	sp, #80	; 0x50
 8000414:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000416:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800041a:	2228      	movs	r2, #40	; 0x28
 800041c:	2100      	movs	r1, #0
 800041e:	4618      	mov	r0, r3
 8000420:	f003 fbc4 	bl	8003bac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000424:	f107 0314 	add.w	r3, r7, #20
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	605a      	str	r2, [r3, #4]
 800042e:	609a      	str	r2, [r3, #8]
 8000430:	60da      	str	r2, [r3, #12]
 8000432:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]
 800043e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000440:	2301      	movs	r3, #1
 8000442:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000444:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000448:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800044a:	2300      	movs	r3, #0
 800044c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800044e:	2301      	movs	r3, #1
 8000450:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000452:	2302      	movs	r3, #2
 8000454:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000456:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800045a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800045c:	2300      	movs	r3, #0
 800045e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000460:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000464:	4618      	mov	r0, r3
 8000466:	f001 fd2f 	bl	8001ec8 <HAL_RCC_OscConfig>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000470:	f000 fb26 	bl	8000ac0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000474:	230f      	movs	r3, #15
 8000476:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000478:	2302      	movs	r3, #2
 800047a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800047c:	2300      	movs	r3, #0
 800047e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000480:	2300      	movs	r3, #0
 8000482:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000484:	2300      	movs	r3, #0
 8000486:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000488:	f107 0314 	add.w	r3, r7, #20
 800048c:	2100      	movs	r1, #0
 800048e:	4618      	mov	r0, r3
 8000490:	f001 ff9a 	bl	80023c8 <HAL_RCC_ClockConfig>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800049a:	f000 fb11 	bl	8000ac0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800049e:	2302      	movs	r3, #2
 80004a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80004a2:	2300      	movs	r3, #0
 80004a4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	4618      	mov	r0, r3
 80004aa:	f002 f927 	bl	80026fc <HAL_RCCEx_PeriphCLKConfig>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80004b4:	f000 fb04 	bl	8000ac0 <Error_Handler>
  }
}
 80004b8:	bf00      	nop
 80004ba:	3750      	adds	r7, #80	; 0x50
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}

080004c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80004c4:	4b10      	ldr	r3, [pc, #64]	; (8000508 <MX_ADC1_Init+0x48>)
 80004c6:	4a11      	ldr	r2, [pc, #68]	; (800050c <MX_ADC1_Init+0x4c>)
 80004c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004ca:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <MX_ADC1_Init+0x48>)
 80004cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004d2:	4b0d      	ldr	r3, [pc, #52]	; (8000508 <MX_ADC1_Init+0x48>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <MX_ADC1_Init+0x48>)
 80004da:	2200      	movs	r2, #0
 80004dc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004de:	4b0a      	ldr	r3, [pc, #40]	; (8000508 <MX_ADC1_Init+0x48>)
 80004e0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80004e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004e6:	4b08      	ldr	r3, [pc, #32]	; (8000508 <MX_ADC1_Init+0x48>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <MX_ADC1_Init+0x48>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004f2:	4805      	ldr	r0, [pc, #20]	; (8000508 <MX_ADC1_Init+0x48>)
 80004f4:	f000 fd8c 	bl	8001010 <HAL_ADC_Init>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <MX_ADC1_Init+0x42>
  {
    Error_Handler();
 80004fe:	f000 fadf 	bl	8000ac0 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	200001a8 	.word	0x200001a8
 800050c:	40012400 	.word	0x40012400

08000510 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000514:	4b17      	ldr	r3, [pc, #92]	; (8000574 <MX_SPI1_Init+0x64>)
 8000516:	4a18      	ldr	r2, [pc, #96]	; (8000578 <MX_SPI1_Init+0x68>)
 8000518:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800051a:	4b16      	ldr	r3, [pc, #88]	; (8000574 <MX_SPI1_Init+0x64>)
 800051c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000520:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000522:	4b14      	ldr	r3, [pc, #80]	; (8000574 <MX_SPI1_Init+0x64>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <MX_SPI1_Init+0x64>)
 800052a:	2200      	movs	r2, #0
 800052c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800052e:	4b11      	ldr	r3, [pc, #68]	; (8000574 <MX_SPI1_Init+0x64>)
 8000530:	2200      	movs	r2, #0
 8000532:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000534:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <MX_SPI1_Init+0x64>)
 8000536:	2200      	movs	r2, #0
 8000538:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800053a:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <MX_SPI1_Init+0x64>)
 800053c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000540:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000542:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <MX_SPI1_Init+0x64>)
 8000544:	2200      	movs	r2, #0
 8000546:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000548:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <MX_SPI1_Init+0x64>)
 800054a:	2200      	movs	r2, #0
 800054c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800054e:	4b09      	ldr	r3, [pc, #36]	; (8000574 <MX_SPI1_Init+0x64>)
 8000550:	2200      	movs	r2, #0
 8000552:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000554:	4b07      	ldr	r3, [pc, #28]	; (8000574 <MX_SPI1_Init+0x64>)
 8000556:	2200      	movs	r2, #0
 8000558:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800055a:	4b06      	ldr	r3, [pc, #24]	; (8000574 <MX_SPI1_Init+0x64>)
 800055c:	220a      	movs	r2, #10
 800055e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000560:	4804      	ldr	r0, [pc, #16]	; (8000574 <MX_SPI1_Init+0x64>)
 8000562:	f002 fa45 	bl	80029f0 <HAL_SPI_Init>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800056c:	f000 faa8 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	200001e0 	.word	0x200001e0
 8000578:	40013000 	.word	0x40013000

0800057c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000582:	f107 0308 	add.w	r3, r7, #8
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000590:	463b      	mov	r3, r7
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000598:	4b1d      	ldr	r3, [pc, #116]	; (8000610 <MX_TIM3_Init+0x94>)
 800059a:	4a1e      	ldr	r2, [pc, #120]	; (8000614 <MX_TIM3_Init+0x98>)
 800059c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15999;
 800059e:	4b1c      	ldr	r3, [pc, #112]	; (8000610 <MX_TIM3_Init+0x94>)
 80005a0:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80005a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005a6:	4b1a      	ldr	r3, [pc, #104]	; (8000610 <MX_TIM3_Init+0x94>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 30000;
 80005ac:	4b18      	ldr	r3, [pc, #96]	; (8000610 <MX_TIM3_Init+0x94>)
 80005ae:	f247 5230 	movw	r2, #30000	; 0x7530
 80005b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005b4:	4b16      	ldr	r3, [pc, #88]	; (8000610 <MX_TIM3_Init+0x94>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005ba:	4b15      	ldr	r3, [pc, #84]	; (8000610 <MX_TIM3_Init+0x94>)
 80005bc:	2280      	movs	r2, #128	; 0x80
 80005be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005c0:	4813      	ldr	r0, [pc, #76]	; (8000610 <MX_TIM3_Init+0x94>)
 80005c2:	f002 fa99 	bl	8002af8 <HAL_TIM_Base_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80005cc:	f000 fa78 	bl	8000ac0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005d6:	f107 0308 	add.w	r3, r7, #8
 80005da:	4619      	mov	r1, r3
 80005dc:	480c      	ldr	r0, [pc, #48]	; (8000610 <MX_TIM3_Init+0x94>)
 80005de:	f002 fc35 	bl	8002e4c <HAL_TIM_ConfigClockSource>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80005e8:	f000 fa6a 	bl	8000ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ec:	2300      	movs	r3, #0
 80005ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005f0:	2300      	movs	r3, #0
 80005f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005f4:	463b      	mov	r3, r7
 80005f6:	4619      	mov	r1, r3
 80005f8:	4805      	ldr	r0, [pc, #20]	; (8000610 <MX_TIM3_Init+0x94>)
 80005fa:	f002 fe07 	bl	800320c <HAL_TIMEx_MasterConfigSynchronization>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000604:	f000 fa5c 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000608:	bf00      	nop
 800060a:	3718      	adds	r7, #24
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000160 	.word	0x20000160
 8000614:	40000400 	.word	0x40000400

08000618 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800061c:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_USART2_UART_Init+0x4c>)
 800061e:	4a12      	ldr	r2, [pc, #72]	; (8000668 <MX_USART2_UART_Init+0x50>)
 8000620:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000622:	4b10      	ldr	r3, [pc, #64]	; (8000664 <MX_USART2_UART_Init+0x4c>)
 8000624:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000628:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <MX_USART2_UART_Init+0x4c>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <MX_USART2_UART_Init+0x4c>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <MX_USART2_UART_Init+0x4c>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800063c:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_USART2_UART_Init+0x4c>)
 800063e:	220c      	movs	r2, #12
 8000640:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <MX_USART2_UART_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_USART2_UART_Init+0x4c>)
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800064e:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_USART2_UART_Init+0x4c>)
 8000650:	f002 fe4c 	bl	80032ec <HAL_UART_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800065a:	f000 fa31 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000238 	.word	0x20000238
 8000668:	40004400 	.word	0x40004400

0800066c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000670:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_USART3_UART_Init+0x4c>)
 8000672:	4a12      	ldr	r2, [pc, #72]	; (80006bc <MX_USART3_UART_Init+0x50>)
 8000674:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <MX_USART3_UART_Init+0x4c>)
 8000678:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800067c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_USART3_UART_Init+0x4c>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_USART3_UART_Init+0x4c>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <MX_USART3_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_USART3_UART_Init+0x4c>)
 8000692:	220c      	movs	r2, #12
 8000694:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <MX_USART3_UART_Init+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_USART3_UART_Init+0x4c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006a2:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_USART3_UART_Init+0x4c>)
 80006a4:	f002 fe22 	bl	80032ec <HAL_UART_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006ae:	f000 fa07 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000120 	.word	0x20000120
 80006bc:	40004800 	.word	0x40004800

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 0310 	add.w	r3, r7, #16
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <MX_GPIO_Init+0xd0>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a2d      	ldr	r2, [pc, #180]	; (8000790 <MX_GPIO_Init+0xd0>)
 80006da:	f043 0310 	orr.w	r3, r3, #16
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <MX_GPIO_Init+0xd0>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f003 0310 	and.w	r3, r3, #16
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ec:	4b28      	ldr	r3, [pc, #160]	; (8000790 <MX_GPIO_Init+0xd0>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4a27      	ldr	r2, [pc, #156]	; (8000790 <MX_GPIO_Init+0xd0>)
 80006f2:	f043 0320 	orr.w	r3, r3, #32
 80006f6:	6193      	str	r3, [r2, #24]
 80006f8:	4b25      	ldr	r3, [pc, #148]	; (8000790 <MX_GPIO_Init+0xd0>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f003 0320 	and.w	r3, r3, #32
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000704:	4b22      	ldr	r3, [pc, #136]	; (8000790 <MX_GPIO_Init+0xd0>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	4a21      	ldr	r2, [pc, #132]	; (8000790 <MX_GPIO_Init+0xd0>)
 800070a:	f043 0304 	orr.w	r3, r3, #4
 800070e:	6193      	str	r3, [r2, #24]
 8000710:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <MX_GPIO_Init+0xd0>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f003 0304 	and.w	r3, r3, #4
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071c:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <MX_GPIO_Init+0xd0>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	4a1b      	ldr	r2, [pc, #108]	; (8000790 <MX_GPIO_Init+0xd0>)
 8000722:	f043 0308 	orr.w	r3, r3, #8
 8000726:	6193      	str	r3, [r2, #24]
 8000728:	4b19      	ldr	r3, [pc, #100]	; (8000790 <MX_GPIO_Init+0xd0>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	f003 0308 	and.w	r3, r3, #8
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800073a:	4816      	ldr	r0, [pc, #88]	; (8000794 <MX_GPIO_Init+0xd4>)
 800073c:	f001 fbac 	bl	8001e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000746:	4814      	ldr	r0, [pc, #80]	; (8000798 <MX_GPIO_Init+0xd8>)
 8000748:	f001 fba6 	bl	8001e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800074c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000750:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000752:	2301      	movs	r3, #1
 8000754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	2302      	movs	r3, #2
 800075c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800075e:	f107 0310 	add.w	r3, r7, #16
 8000762:	4619      	mov	r1, r3
 8000764:	480b      	ldr	r0, [pc, #44]	; (8000794 <MX_GPIO_Init+0xd4>)
 8000766:	f001 fa13 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800076a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800076e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000770:	2301      	movs	r3, #1
 8000772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	2302      	movs	r3, #2
 800077a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077c:	f107 0310 	add.w	r3, r7, #16
 8000780:	4619      	mov	r1, r3
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_GPIO_Init+0xd8>)
 8000784:	f001 fa04 	bl	8001b90 <HAL_GPIO_Init>

}
 8000788:	bf00      	nop
 800078a:	3720      	adds	r7, #32
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40021000 	.word	0x40021000
 8000794:	40011000 	.word	0x40011000
 8000798:	40010c00 	.word	0x40010c00

0800079c <gestion_led>:

/* USER CODE BEGIN 4 */
void gestion_led(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	switch (estado)
 80007a0:	4b22      	ldr	r3, [pc, #136]	; (800082c <gestion_led+0x90>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b02      	cmp	r3, #2
 80007a6:	d02c      	beq.n	8000802 <gestion_led+0x66>
 80007a8:	2b02      	cmp	r3, #2
 80007aa:	dc3d      	bgt.n	8000828 <gestion_led+0x8c>
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d002      	beq.n	80007b6 <gestion_led+0x1a>
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d013      	beq.n	80007dc <gestion_led+0x40>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_SET);
	break;
	}
}
 80007b4:	e038      	b.n	8000828 <gestion_led+0x8c>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);
 80007b6:	2201      	movs	r2, #1
 80007b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007bc:	481c      	ldr	r0, [pc, #112]	; (8000830 <gestion_led+0x94>)
 80007be:	f001 fb6b 	bl	8001e98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c8:	4819      	ldr	r0, [pc, #100]	; (8000830 <gestion_led+0x94>)
 80007ca:	f001 fb65 	bl	8001e98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007d4:	4816      	ldr	r0, [pc, #88]	; (8000830 <gestion_led+0x94>)
 80007d6:	f001 fb5f 	bl	8001e98 <HAL_GPIO_WritePin>
	break;
 80007da:	e025      	b.n	8000828 <gestion_led+0x8c>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e2:	4813      	ldr	r0, [pc, #76]	; (8000830 <gestion_led+0x94>)
 80007e4:	f001 fb58 	bl	8001e98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ee:	4810      	ldr	r0, [pc, #64]	; (8000830 <gestion_led+0x94>)
 80007f0:	f001 fb52 	bl	8001e98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007fa:	480d      	ldr	r0, [pc, #52]	; (8000830 <gestion_led+0x94>)
 80007fc:	f001 fb4c 	bl	8001e98 <HAL_GPIO_WritePin>
	break;
 8000800:	e012      	b.n	8000828 <gestion_led+0x8c>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000808:	4809      	ldr	r0, [pc, #36]	; (8000830 <gestion_led+0x94>)
 800080a:	f001 fb45 	bl	8001e98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000814:	4806      	ldr	r0, [pc, #24]	; (8000830 <gestion_led+0x94>)
 8000816:	f001 fb3f 	bl	8001e98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_SET);
 800081a:	2201      	movs	r2, #1
 800081c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000820:	4803      	ldr	r0, [pc, #12]	; (8000830 <gestion_led+0x94>)
 8000822:	f001 fb39 	bl	8001e98 <HAL_GPIO_WritePin>
	break;
 8000826:	bf00      	nop
}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	200000ec 	.word	0x200000ec
 8000830:	40010c00 	.word	0x40010c00

08000834 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
//	HAL_UART_Transmit_IT(&huart2,(uint8_t*) msgrx, 2);
	HAL_UART_Transmit(&huart2,(uint8_t*) msgrx, 2,100);
 800083c:	2364      	movs	r3, #100	; 0x64
 800083e:	2202      	movs	r2, #2
 8000840:	4937      	ldr	r1, [pc, #220]	; (8000920 <HAL_UART_RxCpltCallback+0xec>)
 8000842:	4838      	ldr	r0, [pc, #224]	; (8000924 <HAL_UART_RxCpltCallback+0xf0>)
 8000844:	f002 fd9f 	bl	8003386 <HAL_UART_Transmit>
	if(stricmp(msgrx,"12")==0)
 8000848:	4937      	ldr	r1, [pc, #220]	; (8000928 <HAL_UART_RxCpltCallback+0xf4>)
 800084a:	4835      	ldr	r0, [pc, #212]	; (8000920 <HAL_UART_RxCpltCallback+0xec>)
 800084c:	f003 f9d6 	bl	8003bfc <strcasecmp>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d10d      	bne.n	8000872 <HAL_UART_RxCpltCallback+0x3e>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)"12", 2, 1000);
 8000856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085a:	2202      	movs	r2, #2
 800085c:	4932      	ldr	r1, [pc, #200]	; (8000928 <HAL_UART_RxCpltCallback+0xf4>)
 800085e:	4831      	ldr	r0, [pc, #196]	; (8000924 <HAL_UART_RxCpltCallback+0xf0>)
 8000860:	f002 fd91 	bl	8003386 <HAL_UART_Transmit>
		valores_a_medir=12;
 8000864:	4b31      	ldr	r3, [pc, #196]	; (800092c <HAL_UART_RxCpltCallback+0xf8>)
 8000866:	220c      	movs	r2, #12
 8000868:	701a      	strb	r2, [r3, #0]
		estado=1;
 800086a:	4b31      	ldr	r3, [pc, #196]	; (8000930 <HAL_UART_RxCpltCallback+0xfc>)
 800086c:	2201      	movs	r2, #1
 800086e:	701a      	strb	r2, [r3, #0]
 8000870:	e04b      	b.n	800090a <HAL_UART_RxCpltCallback+0xd6>
	}
	else
	{
		if(stricmp(msgrx,"24")==0)
 8000872:	4930      	ldr	r1, [pc, #192]	; (8000934 <HAL_UART_RxCpltCallback+0x100>)
 8000874:	482a      	ldr	r0, [pc, #168]	; (8000920 <HAL_UART_RxCpltCallback+0xec>)
 8000876:	f003 f9c1 	bl	8003bfc <strcasecmp>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d10d      	bne.n	800089c <HAL_UART_RxCpltCallback+0x68>
		{
			HAL_UART_Transmit(&huart2, (uint8_t*)"24", 2, 1000);
 8000880:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000884:	2202      	movs	r2, #2
 8000886:	492b      	ldr	r1, [pc, #172]	; (8000934 <HAL_UART_RxCpltCallback+0x100>)
 8000888:	4826      	ldr	r0, [pc, #152]	; (8000924 <HAL_UART_RxCpltCallback+0xf0>)
 800088a:	f002 fd7c 	bl	8003386 <HAL_UART_Transmit>
			valores_a_medir=24;
 800088e:	4b27      	ldr	r3, [pc, #156]	; (800092c <HAL_UART_RxCpltCallback+0xf8>)
 8000890:	2218      	movs	r2, #24
 8000892:	701a      	strb	r2, [r3, #0]
			estado=1;
 8000894:	4b26      	ldr	r3, [pc, #152]	; (8000930 <HAL_UART_RxCpltCallback+0xfc>)
 8000896:	2201      	movs	r2, #1
 8000898:	701a      	strb	r2, [r3, #0]
 800089a:	e036      	b.n	800090a <HAL_UART_RxCpltCallback+0xd6>

		}
		else
		{
			if(stricmp(msgrx,"48")==0)
 800089c:	4926      	ldr	r1, [pc, #152]	; (8000938 <HAL_UART_RxCpltCallback+0x104>)
 800089e:	4820      	ldr	r0, [pc, #128]	; (8000920 <HAL_UART_RxCpltCallback+0xec>)
 80008a0:	f003 f9ac 	bl	8003bfc <strcasecmp>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d10d      	bne.n	80008c6 <HAL_UART_RxCpltCallback+0x92>
			{
				HAL_UART_Transmit(&huart2, (uint8_t*)"48", 2, 1000);
 80008aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ae:	2202      	movs	r2, #2
 80008b0:	4921      	ldr	r1, [pc, #132]	; (8000938 <HAL_UART_RxCpltCallback+0x104>)
 80008b2:	481c      	ldr	r0, [pc, #112]	; (8000924 <HAL_UART_RxCpltCallback+0xf0>)
 80008b4:	f002 fd67 	bl	8003386 <HAL_UART_Transmit>
				valores_a_medir=48;
 80008b8:	4b1c      	ldr	r3, [pc, #112]	; (800092c <HAL_UART_RxCpltCallback+0xf8>)
 80008ba:	2230      	movs	r2, #48	; 0x30
 80008bc:	701a      	strb	r2, [r3, #0]
				estado=1;
 80008be:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <HAL_UART_RxCpltCallback+0xfc>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	701a      	strb	r2, [r3, #0]
 80008c4:	e021      	b.n	800090a <HAL_UART_RxCpltCallback+0xd6>

			}
			else
			{
				if(stricmp(msgrx,"72")==0)
 80008c6:	491d      	ldr	r1, [pc, #116]	; (800093c <HAL_UART_RxCpltCallback+0x108>)
 80008c8:	4815      	ldr	r0, [pc, #84]	; (8000920 <HAL_UART_RxCpltCallback+0xec>)
 80008ca:	f003 f997 	bl	8003bfc <strcasecmp>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d10d      	bne.n	80008f0 <HAL_UART_RxCpltCallback+0xbc>
				{
					HAL_UART_Transmit(&huart2, (uint8_t*)"72", 2, 1000);
 80008d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d8:	2202      	movs	r2, #2
 80008da:	4918      	ldr	r1, [pc, #96]	; (800093c <HAL_UART_RxCpltCallback+0x108>)
 80008dc:	4811      	ldr	r0, [pc, #68]	; (8000924 <HAL_UART_RxCpltCallback+0xf0>)
 80008de:	f002 fd52 	bl	8003386 <HAL_UART_Transmit>
					valores_a_medir=72;
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <HAL_UART_RxCpltCallback+0xf8>)
 80008e4:	2248      	movs	r2, #72	; 0x48
 80008e6:	701a      	strb	r2, [r3, #0]
					estado=1;
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <HAL_UART_RxCpltCallback+0xfc>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	701a      	strb	r2, [r3, #0]
 80008ee:	e00c      	b.n	800090a <HAL_UART_RxCpltCallback+0xd6>

				}
				else
				{
						HAL_UART_Transmit(&huart2, (uint8_t*)"in", 2, 1000);
 80008f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f4:	2202      	movs	r2, #2
 80008f6:	4912      	ldr	r1, [pc, #72]	; (8000940 <HAL_UART_RxCpltCallback+0x10c>)
 80008f8:	480a      	ldr	r0, [pc, #40]	; (8000924 <HAL_UART_RxCpltCallback+0xf0>)
 80008fa:	f002 fd44 	bl	8003386 <HAL_UART_Transmit>
						valores_a_medir=72;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <HAL_UART_RxCpltCallback+0xf8>)
 8000900:	2248      	movs	r2, #72	; 0x48
 8000902:	701a      	strb	r2, [r3, #0]
						estado=1;
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <HAL_UART_RxCpltCallback+0xfc>)
 8000906:	2201      	movs	r2, #1
 8000908:	701a      	strb	r2, [r3, #0]
			}
		}


	}
	HAL_UART_Transmit(&huart3, (uint8_t*)"Valor Ajustado", 14, 1000);
 800090a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090e:	220e      	movs	r2, #14
 8000910:	490c      	ldr	r1, [pc, #48]	; (8000944 <HAL_UART_RxCpltCallback+0x110>)
 8000912:	480d      	ldr	r0, [pc, #52]	; (8000948 <HAL_UART_RxCpltCallback+0x114>)
 8000914:	f002 fd37 	bl	8003386 <HAL_UART_Transmit>

}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000110 	.word	0x20000110
 8000924:	20000238 	.word	0x20000238
 8000928:	08004498 	.word	0x08004498
 800092c:	2000010e 	.word	0x2000010e
 8000930:	200000ec 	.word	0x200000ec
 8000934:	0800449c 	.word	0x0800449c
 8000938:	080044a0 	.word	0x080044a0
 800093c:	080044a4 	.word	0x080044a4
 8000940:	080044a8 	.word	0x080044a8
 8000944:	080044ac 	.word	0x080044ac
 8000948:	20000120 	.word	0x20000120

0800094c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	if(htim==&htim3)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a0f      	ldr	r2, [pc, #60]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d115      	bne.n	8000988 <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
		i++;
 800095c:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	3301      	adds	r3, #1
 8000962:	b2da      	uxtb	r2, r3
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000966:	701a      	strb	r2, [r3, #0]
		i30seg++;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	3301      	adds	r3, #1
 800096e:	b2da      	uxtb	r2, r3
 8000970:	4b0a      	ldr	r3, [pc, #40]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000972:	701a      	strb	r2, [r3, #0]
		if(i30seg>=2)
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b01      	cmp	r3, #1
 800097a:	d905      	bls.n	8000988 <HAL_TIM_PeriodElapsedCallback+0x3c>
		{
			i30seg=0;
 800097c:	4b07      	ldr	r3, [pc, #28]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800097e:	2200      	movs	r2, #0
 8000980:	701a      	strb	r2, [r3, #0]
			mostrar=1;
 8000982:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000984:	2201      	movs	r2, #1
 8000986:	701a      	strb	r2, [r3, #0]
////		mostrar=1;
//		n++;
//	}


}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000160 	.word	0x20000160
 8000998:	200000ed 	.word	0x200000ed
 800099c:	200000fc 	.word	0x200000fc
 80009a0:	2000010a 	.word	0x2000010a

080009a4 <conversion_adc>:
void conversion_adc(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
	n++;
 80009a8:	4b3b      	ldr	r3, [pc, #236]	; (8000a98 <conversion_adc+0xf4>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	3301      	adds	r3, #1
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	4b39      	ldr	r3, [pc, #228]	; (8000a98 <conversion_adc+0xf4>)
 80009b2:	701a      	strb	r2, [r3, #0]
	ADC_Select_CH0();
 80009b4:	f7ff fbca 	bl	800014c <ADC_Select_CH0>
	HAL_ADC_Start(&hadc1);
 80009b8:	4838      	ldr	r0, [pc, #224]	; (8000a9c <conversion_adc+0xf8>)
 80009ba:	f000 fc01 	bl	80011c0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 80009be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009c2:	4836      	ldr	r0, [pc, #216]	; (8000a9c <conversion_adc+0xf8>)
 80009c4:	f000 fcd6 	bl	8001374 <HAL_ADC_PollForConversion>
	valor_vadc=valor_vadc+HAL_ADC_GetValue(&hadc1);
 80009c8:	4834      	ldr	r0, [pc, #208]	; (8000a9c <conversion_adc+0xf8>)
 80009ca:	f000 fdcd 	bl	8001568 <HAL_ADC_GetValue>
 80009ce:	4602      	mov	r2, r0
 80009d0:	4b33      	ldr	r3, [pc, #204]	; (8000aa0 <conversion_adc+0xfc>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4413      	add	r3, r2
 80009d6:	4a32      	ldr	r2, [pc, #200]	; (8000aa0 <conversion_adc+0xfc>)
 80009d8:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop(&hadc1);
 80009da:	4830      	ldr	r0, [pc, #192]	; (8000a9c <conversion_adc+0xf8>)
 80009dc:	f000 fc9e 	bl	800131c <HAL_ADC_Stop>

	ADC_Select_CH1();
 80009e0:	f7ff fbd2 	bl	8000188 <ADC_Select_CH1>
	HAL_ADC_Start(&hadc1);
 80009e4:	482d      	ldr	r0, [pc, #180]	; (8000a9c <conversion_adc+0xf8>)
 80009e6:	f000 fbeb 	bl	80011c0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 80009ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009ee:	482b      	ldr	r0, [pc, #172]	; (8000a9c <conversion_adc+0xf8>)
 80009f0:	f000 fcc0 	bl	8001374 <HAL_ADC_PollForConversion>
	valor_iadc=valor_iadc+HAL_ADC_GetValue(&hadc1);
 80009f4:	4829      	ldr	r0, [pc, #164]	; (8000a9c <conversion_adc+0xf8>)
 80009f6:	f000 fdb7 	bl	8001568 <HAL_ADC_GetValue>
 80009fa:	4602      	mov	r2, r0
 80009fc:	4b29      	ldr	r3, [pc, #164]	; (8000aa4 <conversion_adc+0x100>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4413      	add	r3, r2
 8000a02:	4a28      	ldr	r2, [pc, #160]	; (8000aa4 <conversion_adc+0x100>)
 8000a04:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop(&hadc1);
 8000a06:	4825      	ldr	r0, [pc, #148]	; (8000a9c <conversion_adc+0xf8>)
 8000a08:	f000 fc88 	bl	800131c <HAL_ADC_Stop>

	ADC_Select_CH4();
 8000a0c:	f7ff fbda 	bl	80001c4 <ADC_Select_CH4>
	HAL_ADC_Start(&hadc1);
 8000a10:	4822      	ldr	r0, [pc, #136]	; (8000a9c <conversion_adc+0xf8>)
 8000a12:	f000 fbd5 	bl	80011c0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8000a16:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a1a:	4820      	ldr	r0, [pc, #128]	; (8000a9c <conversion_adc+0xf8>)
 8000a1c:	f000 fcaa 	bl	8001374 <HAL_ADC_PollForConversion>
	valor_tadc=valor_tadc+HAL_ADC_GetValue(&hadc1);
 8000a20:	481e      	ldr	r0, [pc, #120]	; (8000a9c <conversion_adc+0xf8>)
 8000a22:	f000 fda1 	bl	8001568 <HAL_ADC_GetValue>
 8000a26:	4602      	mov	r2, r0
 8000a28:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <conversion_adc+0x104>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	4a1e      	ldr	r2, [pc, #120]	; (8000aa8 <conversion_adc+0x104>)
 8000a30:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop(&hadc1);
 8000a32:	481a      	ldr	r0, [pc, #104]	; (8000a9c <conversion_adc+0xf8>)
 8000a34:	f000 fc72 	bl	800131c <HAL_ADC_Stop>

	if(n>100)
 8000a38:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <conversion_adc+0xf4>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b64      	cmp	r3, #100	; 0x64
 8000a3e:	d929      	bls.n	8000a94 <conversion_adc+0xf0>
	{
//		mostrar=1;
		voltaje=valor_vadc/100;
 8000a40:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <conversion_adc+0xfc>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a19      	ldr	r2, [pc, #100]	; (8000aac <conversion_adc+0x108>)
 8000a46:	fba2 2303 	umull	r2, r3, r2, r3
 8000a4a:	095b      	lsrs	r3, r3, #5
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <conversion_adc+0x10c>)
 8000a50:	801a      	strh	r2, [r3, #0]
		corriente=valor_iadc/100;
 8000a52:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <conversion_adc+0x100>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a15      	ldr	r2, [pc, #84]	; (8000aac <conversion_adc+0x108>)
 8000a58:	fba2 2303 	umull	r2, r3, r2, r3
 8000a5c:	095b      	lsrs	r3, r3, #5
 8000a5e:	b29a      	uxth	r2, r3
 8000a60:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <conversion_adc+0x110>)
 8000a62:	801a      	strh	r2, [r3, #0]
		temperatura=valor_tadc/100;
 8000a64:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <conversion_adc+0x104>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a10      	ldr	r2, [pc, #64]	; (8000aac <conversion_adc+0x108>)
 8000a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6e:	095b      	lsrs	r3, r3, #5
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <conversion_adc+0x114>)
 8000a74:	801a      	strh	r2, [r3, #0]
		//Ingresar aqui las formulas
		valor_vadc=0;
 8000a76:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <conversion_adc+0xfc>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
		valor_iadc=	0;
 8000a7c:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <conversion_adc+0x100>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
		valor_tadc=0;
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <conversion_adc+0x104>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]

		n=0;
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <conversion_adc+0xf4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	701a      	strb	r2, [r3, #0]

		conv_adc_rdy=1;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <conversion_adc+0x118>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	701a      	strb	r2, [r3, #0]
	}
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	2000010c 	.word	0x2000010c
 8000a9c:	200001a8 	.word	0x200001a8
 8000aa0:	200000f0 	.word	0x200000f0
 8000aa4:	200000f4 	.word	0x200000f4
 8000aa8:	200000f8 	.word	0x200000f8
 8000aac:	51eb851f 	.word	0x51eb851f
 8000ab0:	200001dc 	.word	0x200001dc
 8000ab4:	20000284 	.word	0x20000284
 8000ab8:	20000278 	.word	0x20000278
 8000abc:	2000010b 	.word	0x2000010b

08000ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac4:	b672      	cpsid	i
}
 8000ac6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <Error_Handler+0x8>
	...

08000acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <HAL_MspInit+0x5c>)
 8000ad4:	699b      	ldr	r3, [r3, #24]
 8000ad6:	4a14      	ldr	r2, [pc, #80]	; (8000b28 <HAL_MspInit+0x5c>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6193      	str	r3, [r2, #24]
 8000ade:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <HAL_MspInit+0x5c>)
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aea:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <HAL_MspInit+0x5c>)
 8000aec:	69db      	ldr	r3, [r3, #28]
 8000aee:	4a0e      	ldr	r2, [pc, #56]	; (8000b28 <HAL_MspInit+0x5c>)
 8000af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af4:	61d3      	str	r3, [r2, #28]
 8000af6:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <HAL_MspInit+0x5c>)
 8000af8:	69db      	ldr	r3, [r3, #28]
 8000afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b02:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <HAL_MspInit+0x60>)
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <HAL_MspInit+0x60>)
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	3714      	adds	r7, #20
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	40010000 	.word	0x40010000

08000b30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b088      	sub	sp, #32
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 0310 	add.w	r3, r7, #16
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a14      	ldr	r2, [pc, #80]	; (8000b9c <HAL_ADC_MspInit+0x6c>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d121      	bne.n	8000b94 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b50:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <HAL_ADC_MspInit+0x70>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	4a12      	ldr	r2, [pc, #72]	; (8000ba0 <HAL_ADC_MspInit+0x70>)
 8000b56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b5a:	6193      	str	r3, [r2, #24]
 8000b5c:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <HAL_ADC_MspInit+0x70>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b68:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <HAL_ADC_MspInit+0x70>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ba0 <HAL_ADC_MspInit+0x70>)
 8000b6e:	f043 0304 	orr.w	r3, r3, #4
 8000b72:	6193      	str	r3, [r2, #24]
 8000b74:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <HAL_ADC_MspInit+0x70>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	f003 0304 	and.w	r3, r3, #4
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8000b80:	2313      	movs	r3, #19
 8000b82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b84:	2303      	movs	r3, #3
 8000b86:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b88:	f107 0310 	add.w	r3, r7, #16
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <HAL_ADC_MspInit+0x74>)
 8000b90:	f000 fffe 	bl	8001b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b94:	bf00      	nop
 8000b96:	3720      	adds	r7, #32
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40012400 	.word	0x40012400
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	40010800 	.word	0x40010800

08000ba8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0310 	add.w	r3, r7, #16
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a1b      	ldr	r2, [pc, #108]	; (8000c30 <HAL_SPI_MspInit+0x88>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d12f      	bne.n	8000c28 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <HAL_SPI_MspInit+0x8c>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	4a19      	ldr	r2, [pc, #100]	; (8000c34 <HAL_SPI_MspInit+0x8c>)
 8000bce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bd2:	6193      	str	r3, [r2, #24]
 8000bd4:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <HAL_SPI_MspInit+0x8c>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be0:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <HAL_SPI_MspInit+0x8c>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	4a13      	ldr	r2, [pc, #76]	; (8000c34 <HAL_SPI_MspInit+0x8c>)
 8000be6:	f043 0304 	orr.w	r3, r3, #4
 8000bea:	6193      	str	r3, [r2, #24]
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <HAL_SPI_MspInit+0x8c>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	f003 0304 	and.w	r3, r3, #4
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000bf8:	23a0      	movs	r3, #160	; 0xa0
 8000bfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c00:	2303      	movs	r3, #3
 8000c02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c04:	f107 0310 	add.w	r3, r7, #16
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480b      	ldr	r0, [pc, #44]	; (8000c38 <HAL_SPI_MspInit+0x90>)
 8000c0c:	f000 ffc0 	bl	8001b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c10:	2340      	movs	r3, #64	; 0x40
 8000c12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1c:	f107 0310 	add.w	r3, r7, #16
 8000c20:	4619      	mov	r1, r3
 8000c22:	4805      	ldr	r0, [pc, #20]	; (8000c38 <HAL_SPI_MspInit+0x90>)
 8000c24:	f000 ffb4 	bl	8001b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c28:	bf00      	nop
 8000c2a:	3720      	adds	r7, #32
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40013000 	.word	0x40013000
 8000c34:	40021000 	.word	0x40021000
 8000c38:	40010800 	.word	0x40010800

08000c3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0d      	ldr	r2, [pc, #52]	; (8000c80 <HAL_TIM_Base_MspInit+0x44>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d113      	bne.n	8000c76 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <HAL_TIM_Base_MspInit+0x48>)
 8000c50:	69db      	ldr	r3, [r3, #28]
 8000c52:	4a0c      	ldr	r2, [pc, #48]	; (8000c84 <HAL_TIM_Base_MspInit+0x48>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	61d3      	str	r3, [r2, #28]
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <HAL_TIM_Base_MspInit+0x48>)
 8000c5c:	69db      	ldr	r3, [r3, #28]
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2100      	movs	r1, #0
 8000c6a:	201d      	movs	r0, #29
 8000c6c:	f000 fee3 	bl	8001a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c70:	201d      	movs	r0, #29
 8000c72:	f000 fefc 	bl	8001a6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c76:	bf00      	nop
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40000400 	.word	0x40000400
 8000c84:	40021000 	.word	0x40021000

08000c88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	; 0x28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 0318 	add.w	r3, r7, #24
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a3f      	ldr	r2, [pc, #252]	; (8000da0 <HAL_UART_MspInit+0x118>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d138      	bne.n	8000d1a <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ca8:	4b3e      	ldr	r3, [pc, #248]	; (8000da4 <HAL_UART_MspInit+0x11c>)
 8000caa:	69db      	ldr	r3, [r3, #28]
 8000cac:	4a3d      	ldr	r2, [pc, #244]	; (8000da4 <HAL_UART_MspInit+0x11c>)
 8000cae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb2:	61d3      	str	r3, [r2, #28]
 8000cb4:	4b3b      	ldr	r3, [pc, #236]	; (8000da4 <HAL_UART_MspInit+0x11c>)
 8000cb6:	69db      	ldr	r3, [r3, #28]
 8000cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc0:	4b38      	ldr	r3, [pc, #224]	; (8000da4 <HAL_UART_MspInit+0x11c>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	4a37      	ldr	r2, [pc, #220]	; (8000da4 <HAL_UART_MspInit+0x11c>)
 8000cc6:	f043 0304 	orr.w	r3, r3, #4
 8000cca:	6193      	str	r3, [r2, #24]
 8000ccc:	4b35      	ldr	r3, [pc, #212]	; (8000da4 <HAL_UART_MspInit+0x11c>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	f003 0304 	and.w	r3, r3, #4
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cd8:	2304      	movs	r3, #4
 8000cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	f107 0318 	add.w	r3, r7, #24
 8000ce8:	4619      	mov	r1, r3
 8000cea:	482f      	ldr	r0, [pc, #188]	; (8000da8 <HAL_UART_MspInit+0x120>)
 8000cec:	f000 ff50 	bl	8001b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cf0:	2308      	movs	r3, #8
 8000cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfc:	f107 0318 	add.w	r3, r7, #24
 8000d00:	4619      	mov	r1, r3
 8000d02:	4829      	ldr	r0, [pc, #164]	; (8000da8 <HAL_UART_MspInit+0x120>)
 8000d04:	f000 ff44 	bl	8001b90 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	2026      	movs	r0, #38	; 0x26
 8000d0e:	f000 fe92 	bl	8001a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d12:	2026      	movs	r0, #38	; 0x26
 8000d14:	f000 feab 	bl	8001a6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d18:	e03e      	b.n	8000d98 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART3)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a23      	ldr	r2, [pc, #140]	; (8000dac <HAL_UART_MspInit+0x124>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d139      	bne.n	8000d98 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d24:	4b1f      	ldr	r3, [pc, #124]	; (8000da4 <HAL_UART_MspInit+0x11c>)
 8000d26:	69db      	ldr	r3, [r3, #28]
 8000d28:	4a1e      	ldr	r2, [pc, #120]	; (8000da4 <HAL_UART_MspInit+0x11c>)
 8000d2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d2e:	61d3      	str	r3, [r2, #28]
 8000d30:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <HAL_UART_MspInit+0x11c>)
 8000d32:	69db      	ldr	r3, [r3, #28]
 8000d34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3c:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <HAL_UART_MspInit+0x11c>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	4a18      	ldr	r2, [pc, #96]	; (8000da4 <HAL_UART_MspInit+0x11c>)
 8000d42:	f043 0308 	orr.w	r3, r3, #8
 8000d46:	6193      	str	r3, [r2, #24]
 8000d48:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <HAL_UART_MspInit+0x11c>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	f003 0308 	and.w	r3, r3, #8
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d62:	f107 0318 	add.w	r3, r7, #24
 8000d66:	4619      	mov	r1, r3
 8000d68:	4811      	ldr	r0, [pc, #68]	; (8000db0 <HAL_UART_MspInit+0x128>)
 8000d6a:	f000 ff11 	bl	8001b90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7c:	f107 0318 	add.w	r3, r7, #24
 8000d80:	4619      	mov	r1, r3
 8000d82:	480b      	ldr	r0, [pc, #44]	; (8000db0 <HAL_UART_MspInit+0x128>)
 8000d84:	f000 ff04 	bl	8001b90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	2027      	movs	r0, #39	; 0x27
 8000d8e:	f000 fe52 	bl	8001a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d92:	2027      	movs	r0, #39	; 0x27
 8000d94:	f000 fe6b 	bl	8001a6e <HAL_NVIC_EnableIRQ>
}
 8000d98:	bf00      	nop
 8000d9a:	3728      	adds	r7, #40	; 0x28
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40004400 	.word	0x40004400
 8000da4:	40021000 	.word	0x40021000
 8000da8:	40010800 	.word	0x40010800
 8000dac:	40004800 	.word	0x40004800
 8000db0:	40010c00 	.word	0x40010c00

08000db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <NMI_Handler+0x4>

08000dba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <HardFault_Handler+0x4>

08000dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <MemManage_Handler+0x4>

08000dc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dca:	e7fe      	b.n	8000dca <BusFault_Handler+0x4>

08000dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <UsageFault_Handler+0x4>

08000dd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr

08000dde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr

08000dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc80      	pop	{r7}
 8000df4:	4770      	bx	lr

08000df6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dfa:	f000 f8c9 	bl	8000f90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <TIM3_IRQHandler+0x10>)
 8000e0a:	f001 ff17 	bl	8002c3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000160 	.word	0x20000160

08000e18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e1c:	4802      	ldr	r0, [pc, #8]	; (8000e28 <USART2_IRQHandler+0x10>)
 8000e1e:	f002 fb99 	bl	8003554 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000238 	.word	0x20000238

08000e2c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <USART3_IRQHandler+0x10>)
 8000e32:	f002 fb8f 	bl	8003554 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000120 	.word	0x20000120

08000e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e48:	4a14      	ldr	r2, [pc, #80]	; (8000e9c <_sbrk+0x5c>)
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <_sbrk+0x60>)
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <_sbrk+0x64>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d102      	bne.n	8000e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <_sbrk+0x64>)
 8000e5e:	4a12      	ldr	r2, [pc, #72]	; (8000ea8 <_sbrk+0x68>)
 8000e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <_sbrk+0x64>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d207      	bcs.n	8000e80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e70:	f002 fe72 	bl	8003b58 <__errno>
 8000e74:	4603      	mov	r3, r0
 8000e76:	220c      	movs	r2, #12
 8000e78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7e:	e009      	b.n	8000e94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <_sbrk+0x64>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e86:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <_sbrk+0x64>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	4a05      	ldr	r2, [pc, #20]	; (8000ea4 <_sbrk+0x64>)
 8000e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e92:	68fb      	ldr	r3, [r7, #12]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3718      	adds	r7, #24
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20005000 	.word	0x20005000
 8000ea0:	00000400 	.word	0x00000400
 8000ea4:	20000114 	.word	0x20000114
 8000ea8:	200002a0 	.word	0x200002a0

08000eac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr

08000eb8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000eb8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000eba:	e003      	b.n	8000ec4 <LoopCopyDataInit>

08000ebc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000ebe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ec0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000ec2:	3104      	adds	r1, #4

08000ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ec4:	480a      	ldr	r0, [pc, #40]	; (8000ef0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000ec8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000eca:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ecc:	d3f6      	bcc.n	8000ebc <CopyDataInit>
  ldr r2, =_sbss
 8000ece:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000ed0:	e002      	b.n	8000ed8 <LoopFillZerobss>

08000ed2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000ed4:	f842 3b04 	str.w	r3, [r2], #4

08000ed8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000eda:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000edc:	d3f9      	bcc.n	8000ed2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ede:	f7ff ffe5 	bl	8000eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ee2:	f002 fe3f 	bl	8003b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ee6:	f7ff f98b 	bl	8000200 <main>
  bx lr
 8000eea:	4770      	bx	lr
  ldr r3, =_sidata
 8000eec:	08004630 	.word	0x08004630
  ldr r0, =_sdata
 8000ef0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ef4:	200000d0 	.word	0x200000d0
  ldr r2, =_sbss
 8000ef8:	200000d0 	.word	0x200000d0
  ldr r3, = _ebss
 8000efc:	2000029c 	.word	0x2000029c

08000f00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f00:	e7fe      	b.n	8000f00 <ADC1_2_IRQHandler>
	...

08000f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <HAL_Init+0x28>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a07      	ldr	r2, [pc, #28]	; (8000f2c <HAL_Init+0x28>)
 8000f0e:	f043 0310 	orr.w	r3, r3, #16
 8000f12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f14:	2003      	movs	r0, #3
 8000f16:	f000 fd83 	bl	8001a20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f000 f808 	bl	8000f30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f20:	f7ff fdd4 	bl	8000acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40022000 	.word	0x40022000

08000f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <HAL_InitTick+0x54>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_InitTick+0x58>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4619      	mov	r1, r3
 8000f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 fd9b 	bl	8001a8a <HAL_SYSTICK_Config>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e00e      	b.n	8000f7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2b0f      	cmp	r3, #15
 8000f62:	d80a      	bhi.n	8000f7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f64:	2200      	movs	r2, #0
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6c:	f000 fd63 	bl	8001a36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f70:	4a06      	ldr	r2, [pc, #24]	; (8000f8c <HAL_InitTick+0x5c>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f76:	2300      	movs	r3, #0
 8000f78:	e000      	b.n	8000f7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000060 	.word	0x20000060
 8000f88:	20000068 	.word	0x20000068
 8000f8c:	20000064 	.word	0x20000064

08000f90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <HAL_IncTick+0x1c>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <HAL_IncTick+0x20>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	4a03      	ldr	r2, [pc, #12]	; (8000fb0 <HAL_IncTick+0x20>)
 8000fa2:	6013      	str	r3, [r2, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr
 8000fac:	20000068 	.word	0x20000068
 8000fb0:	20000288 	.word	0x20000288

08000fb4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb8:	4b02      	ldr	r3, [pc, #8]	; (8000fc4 <HAL_GetTick+0x10>)
 8000fba:	681b      	ldr	r3, [r3, #0]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	20000288 	.word	0x20000288

08000fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd0:	f7ff fff0 	bl	8000fb4 <HAL_GetTick>
 8000fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe0:	d005      	beq.n	8000fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	; (800100c <HAL_Delay+0x44>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4413      	add	r3, r2
 8000fec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fee:	bf00      	nop
 8000ff0:	f7ff ffe0 	bl	8000fb4 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d8f7      	bhi.n	8000ff0 <HAL_Delay+0x28>
  {
  }
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000068 	.word	0x20000068

08001010 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001018:	2300      	movs	r3, #0
 800101a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800101c:	2300      	movs	r3, #0
 800101e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001020:	2300      	movs	r3, #0
 8001022:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d101      	bne.n	8001032 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e0be      	b.n	80011b0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103c:	2b00      	cmp	r3, #0
 800103e:	d109      	bne.n	8001054 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff fd6e 	bl	8000b30 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f000 fbdd 	bl	8001814 <ADC_ConversionStop_Disable>
 800105a:	4603      	mov	r3, r0
 800105c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001062:	f003 0310 	and.w	r3, r3, #16
 8001066:	2b00      	cmp	r3, #0
 8001068:	f040 8099 	bne.w	800119e <HAL_ADC_Init+0x18e>
 800106c:	7dfb      	ldrb	r3, [r7, #23]
 800106e:	2b00      	cmp	r3, #0
 8001070:	f040 8095 	bne.w	800119e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001078:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800107c:	f023 0302 	bic.w	r3, r3, #2
 8001080:	f043 0202 	orr.w	r2, r3, #2
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001090:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	7b1b      	ldrb	r3, [r3, #12]
 8001096:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001098:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	4313      	orrs	r3, r2
 800109e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010a8:	d003      	beq.n	80010b2 <HAL_ADC_Init+0xa2>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d102      	bne.n	80010b8 <HAL_ADC_Init+0xa8>
 80010b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010b6:	e000      	b.n	80010ba <HAL_ADC_Init+0xaa>
 80010b8:	2300      	movs	r3, #0
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	7d1b      	ldrb	r3, [r3, #20]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d119      	bne.n	80010fc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	7b1b      	ldrb	r3, [r3, #12]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d109      	bne.n	80010e4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	3b01      	subs	r3, #1
 80010d6:	035a      	lsls	r2, r3, #13
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	e00b      	b.n	80010fc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e8:	f043 0220 	orr.w	r2, r3, #32
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f4:	f043 0201 	orr.w	r2, r3, #1
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	430a      	orrs	r2, r1
 800110e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	689a      	ldr	r2, [r3, #8]
 8001116:	4b28      	ldr	r3, [pc, #160]	; (80011b8 <HAL_ADC_Init+0x1a8>)
 8001118:	4013      	ands	r3, r2
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	6812      	ldr	r2, [r2, #0]
 800111e:	68b9      	ldr	r1, [r7, #8]
 8001120:	430b      	orrs	r3, r1
 8001122:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800112c:	d003      	beq.n	8001136 <HAL_ADC_Init+0x126>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d104      	bne.n	8001140 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	3b01      	subs	r3, #1
 800113c:	051b      	lsls	r3, r3, #20
 800113e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001146:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	430a      	orrs	r2, r1
 8001152:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	689a      	ldr	r2, [r3, #8]
 800115a:	4b18      	ldr	r3, [pc, #96]	; (80011bc <HAL_ADC_Init+0x1ac>)
 800115c:	4013      	ands	r3, r2
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	429a      	cmp	r2, r3
 8001162:	d10b      	bne.n	800117c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116e:	f023 0303 	bic.w	r3, r3, #3
 8001172:	f043 0201 	orr.w	r2, r3, #1
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800117a:	e018      	b.n	80011ae <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001180:	f023 0312 	bic.w	r3, r3, #18
 8001184:	f043 0210 	orr.w	r2, r3, #16
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001190:	f043 0201 	orr.w	r2, r3, #1
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800119c:	e007      	b.n	80011ae <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a2:	f043 0210 	orr.w	r2, r3, #16
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	ffe1f7fd 	.word	0xffe1f7fd
 80011bc:	ff1f0efe 	.word	0xff1f0efe

080011c0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011c8:	2300      	movs	r3, #0
 80011ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d101      	bne.n	80011da <HAL_ADC_Start+0x1a>
 80011d6:	2302      	movs	r3, #2
 80011d8:	e098      	b.n	800130c <HAL_ADC_Start+0x14c>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2201      	movs	r2, #1
 80011de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f000 fac4 	bl	8001770 <ADC_Enable>
 80011e8:	4603      	mov	r3, r0
 80011ea:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f040 8087 	bne.w	8001302 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011fc:	f023 0301 	bic.w	r3, r3, #1
 8001200:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a41      	ldr	r2, [pc, #260]	; (8001314 <HAL_ADC_Start+0x154>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d105      	bne.n	800121e <HAL_ADC_Start+0x5e>
 8001212:	4b41      	ldr	r3, [pc, #260]	; (8001318 <HAL_ADC_Start+0x158>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d115      	bne.n	800124a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001222:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001234:	2b00      	cmp	r3, #0
 8001236:	d026      	beq.n	8001286 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001240:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001248:	e01d      	b.n	8001286 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800124e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a2f      	ldr	r2, [pc, #188]	; (8001318 <HAL_ADC_Start+0x158>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d004      	beq.n	800126a <HAL_ADC_Start+0xaa>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a2b      	ldr	r2, [pc, #172]	; (8001314 <HAL_ADC_Start+0x154>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d10d      	bne.n	8001286 <HAL_ADC_Start+0xc6>
 800126a:	4b2b      	ldr	r3, [pc, #172]	; (8001318 <HAL_ADC_Start+0x158>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001272:	2b00      	cmp	r3, #0
 8001274:	d007      	beq.n	8001286 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800127e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d006      	beq.n	80012a0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001296:	f023 0206 	bic.w	r2, r3, #6
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	62da      	str	r2, [r3, #44]	; 0x2c
 800129e:	e002      	b.n	80012a6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f06f 0202 	mvn.w	r2, #2
 80012b6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80012c2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80012c6:	d113      	bne.n	80012f0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80012cc:	4a11      	ldr	r2, [pc, #68]	; (8001314 <HAL_ADC_Start+0x154>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d105      	bne.n	80012de <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <HAL_ADC_Start+0x158>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d108      	bne.n	80012f0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	e00c      	b.n	800130a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689a      	ldr	r2, [r3, #8]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	e003      	b.n	800130a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800130a:	7bfb      	ldrb	r3, [r7, #15]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40012800 	.word	0x40012800
 8001318:	40012400 	.word	0x40012400

0800131c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001324:	2300      	movs	r3, #0
 8001326:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800132e:	2b01      	cmp	r3, #1
 8001330:	d101      	bne.n	8001336 <HAL_ADC_Stop+0x1a>
 8001332:	2302      	movs	r3, #2
 8001334:	e01a      	b.n	800136c <HAL_ADC_Stop+0x50>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f000 fa68 	bl	8001814 <ADC_ConversionStop_Disable>
 8001344:	4603      	mov	r3, r0
 8001346:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d109      	bne.n	8001362 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001352:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001356:	f023 0301 	bic.w	r3, r3, #1
 800135a:	f043 0201 	orr.w	r2, r3, #1
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800136a:	7bfb      	ldrb	r3, [r7, #15]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001374:	b590      	push	{r4, r7, lr}
 8001376:	b087      	sub	sp, #28
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800138a:	f7ff fe13 	bl	8000fb4 <HAL_GetTick>
 800138e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139a:	2b00      	cmp	r3, #0
 800139c:	d00b      	beq.n	80013b6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a2:	f043 0220 	orr.w	r2, r3, #32
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e0c8      	b.n	8001548 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d12a      	bne.n	800141a <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d123      	bne.n	800141a <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80013d2:	e01a      	b.n	800140a <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013da:	d016      	beq.n	800140a <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d007      	beq.n	80013f2 <HAL_ADC_PollForConversion+0x7e>
 80013e2:	f7ff fde7 	bl	8000fb4 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d20b      	bcs.n	800140a <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f6:	f043 0204 	orr.w	r2, r3, #4
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e09e      	b.n	8001548 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d0dd      	beq.n	80013d4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001418:	e06c      	b.n	80014f4 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800141a:	4b4d      	ldr	r3, [pc, #308]	; (8001550 <HAL_ADC_PollForConversion+0x1dc>)
 800141c:	681c      	ldr	r4, [r3, #0]
 800141e:	2002      	movs	r0, #2
 8001420:	f001 fa22 	bl	8002868 <HAL_RCCEx_GetPeriphCLKFreq>
 8001424:	4603      	mov	r3, r0
 8001426:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	6919      	ldr	r1, [r3, #16]
 8001430:	4b48      	ldr	r3, [pc, #288]	; (8001554 <HAL_ADC_PollForConversion+0x1e0>)
 8001432:	400b      	ands	r3, r1
 8001434:	2b00      	cmp	r3, #0
 8001436:	d118      	bne.n	800146a <HAL_ADC_PollForConversion+0xf6>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	68d9      	ldr	r1, [r3, #12]
 800143e:	4b46      	ldr	r3, [pc, #280]	; (8001558 <HAL_ADC_PollForConversion+0x1e4>)
 8001440:	400b      	ands	r3, r1
 8001442:	2b00      	cmp	r3, #0
 8001444:	d111      	bne.n	800146a <HAL_ADC_PollForConversion+0xf6>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6919      	ldr	r1, [r3, #16]
 800144c:	4b43      	ldr	r3, [pc, #268]	; (800155c <HAL_ADC_PollForConversion+0x1e8>)
 800144e:	400b      	ands	r3, r1
 8001450:	2b00      	cmp	r3, #0
 8001452:	d108      	bne.n	8001466 <HAL_ADC_PollForConversion+0xf2>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	68d9      	ldr	r1, [r3, #12]
 800145a:	4b41      	ldr	r3, [pc, #260]	; (8001560 <HAL_ADC_PollForConversion+0x1ec>)
 800145c:	400b      	ands	r3, r1
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_ADC_PollForConversion+0xf2>
 8001462:	2314      	movs	r3, #20
 8001464:	e020      	b.n	80014a8 <HAL_ADC_PollForConversion+0x134>
 8001466:	2329      	movs	r3, #41	; 0x29
 8001468:	e01e      	b.n	80014a8 <HAL_ADC_PollForConversion+0x134>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6919      	ldr	r1, [r3, #16]
 8001470:	4b3a      	ldr	r3, [pc, #232]	; (800155c <HAL_ADC_PollForConversion+0x1e8>)
 8001472:	400b      	ands	r3, r1
 8001474:	2b00      	cmp	r3, #0
 8001476:	d106      	bne.n	8001486 <HAL_ADC_PollForConversion+0x112>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	68d9      	ldr	r1, [r3, #12]
 800147e:	4b38      	ldr	r3, [pc, #224]	; (8001560 <HAL_ADC_PollForConversion+0x1ec>)
 8001480:	400b      	ands	r3, r1
 8001482:	2b00      	cmp	r3, #0
 8001484:	d00d      	beq.n	80014a2 <HAL_ADC_PollForConversion+0x12e>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6919      	ldr	r1, [r3, #16]
 800148c:	4b35      	ldr	r3, [pc, #212]	; (8001564 <HAL_ADC_PollForConversion+0x1f0>)
 800148e:	400b      	ands	r3, r1
 8001490:	2b00      	cmp	r3, #0
 8001492:	d108      	bne.n	80014a6 <HAL_ADC_PollForConversion+0x132>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	68d9      	ldr	r1, [r3, #12]
 800149a:	4b32      	ldr	r3, [pc, #200]	; (8001564 <HAL_ADC_PollForConversion+0x1f0>)
 800149c:	400b      	ands	r3, r1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_ADC_PollForConversion+0x132>
 80014a2:	2354      	movs	r3, #84	; 0x54
 80014a4:	e000      	b.n	80014a8 <HAL_ADC_PollForConversion+0x134>
 80014a6:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80014a8:	fb02 f303 	mul.w	r3, r2, r3
 80014ac:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80014ae:	e01d      	b.n	80014ec <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b6:	d016      	beq.n	80014e6 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d007      	beq.n	80014ce <HAL_ADC_PollForConversion+0x15a>
 80014be:	f7ff fd79 	bl	8000fb4 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d20b      	bcs.n	80014e6 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d2:	f043 0204 	orr.w	r2, r3, #4
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e030      	b.n	8001548 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	3301      	adds	r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d8dd      	bhi.n	80014b0 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f06f 0212 	mvn.w	r2, #18
 80014fc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001502:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001514:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001518:	d115      	bne.n	8001546 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800151e:	2b00      	cmp	r3, #0
 8001520:	d111      	bne.n	8001546 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001526:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001532:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d105      	bne.n	8001546 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153e:	f043 0201 	orr.w	r2, r3, #1
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	371c      	adds	r7, #28
 800154c:	46bd      	mov	sp, r7
 800154e:	bd90      	pop	{r4, r7, pc}
 8001550:	20000060 	.word	0x20000060
 8001554:	24924924 	.word	0x24924924
 8001558:	00924924 	.word	0x00924924
 800155c:	12492492 	.word	0x12492492
 8001560:	00492492 	.word	0x00492492
 8001564:	00249249 	.word	0x00249249

08001568 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr

08001580 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800158a:	2300      	movs	r3, #0
 800158c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001598:	2b01      	cmp	r3, #1
 800159a:	d101      	bne.n	80015a0 <HAL_ADC_ConfigChannel+0x20>
 800159c:	2302      	movs	r3, #2
 800159e:	e0dc      	b.n	800175a <HAL_ADC_ConfigChannel+0x1da>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2201      	movs	r2, #1
 80015a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b06      	cmp	r3, #6
 80015ae:	d81c      	bhi.n	80015ea <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	4613      	mov	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	3b05      	subs	r3, #5
 80015c2:	221f      	movs	r2, #31
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	4019      	ands	r1, r3
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	6818      	ldr	r0, [r3, #0]
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	3b05      	subs	r3, #5
 80015dc:	fa00 f203 	lsl.w	r2, r0, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	430a      	orrs	r2, r1
 80015e6:	635a      	str	r2, [r3, #52]	; 0x34
 80015e8:	e03c      	b.n	8001664 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b0c      	cmp	r3, #12
 80015f0:	d81c      	bhi.n	800162c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	3b23      	subs	r3, #35	; 0x23
 8001604:	221f      	movs	r2, #31
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	4019      	ands	r1, r3
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	6818      	ldr	r0, [r3, #0]
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	4613      	mov	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	3b23      	subs	r3, #35	; 0x23
 800161e:	fa00 f203 	lsl.w	r2, r0, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	430a      	orrs	r2, r1
 8001628:	631a      	str	r2, [r3, #48]	; 0x30
 800162a:	e01b      	b.n	8001664 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	3b41      	subs	r3, #65	; 0x41
 800163e:	221f      	movs	r2, #31
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	4019      	ands	r1, r3
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	6818      	ldr	r0, [r3, #0]
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685a      	ldr	r2, [r3, #4]
 8001650:	4613      	mov	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	3b41      	subs	r3, #65	; 0x41
 8001658:	fa00 f203 	lsl.w	r2, r0, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	430a      	orrs	r2, r1
 8001662:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b09      	cmp	r3, #9
 800166a:	d91c      	bls.n	80016a6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68d9      	ldr	r1, [r3, #12]
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	4613      	mov	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	4413      	add	r3, r2
 800167c:	3b1e      	subs	r3, #30
 800167e:	2207      	movs	r2, #7
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	4019      	ands	r1, r3
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	6898      	ldr	r0, [r3, #8]
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4613      	mov	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4413      	add	r3, r2
 8001696:	3b1e      	subs	r3, #30
 8001698:	fa00 f203 	lsl.w	r2, r0, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	430a      	orrs	r2, r1
 80016a2:	60da      	str	r2, [r3, #12]
 80016a4:	e019      	b.n	80016da <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6919      	ldr	r1, [r3, #16]
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4613      	mov	r3, r2
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	4413      	add	r3, r2
 80016b6:	2207      	movs	r2, #7
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	4019      	ands	r1, r3
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	6898      	ldr	r0, [r3, #8]
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4613      	mov	r3, r2
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	4413      	add	r3, r2
 80016ce:	fa00 f203 	lsl.w	r2, r0, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	430a      	orrs	r2, r1
 80016d8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b10      	cmp	r3, #16
 80016e0:	d003      	beq.n	80016ea <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016e6:	2b11      	cmp	r3, #17
 80016e8:	d132      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a1d      	ldr	r2, [pc, #116]	; (8001764 <HAL_ADC_ConfigChannel+0x1e4>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d125      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d126      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001710:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2b10      	cmp	r3, #16
 8001718:	d11a      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800171a:	4b13      	ldr	r3, [pc, #76]	; (8001768 <HAL_ADC_ConfigChannel+0x1e8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a13      	ldr	r2, [pc, #76]	; (800176c <HAL_ADC_ConfigChannel+0x1ec>)
 8001720:	fba2 2303 	umull	r2, r3, r2, r3
 8001724:	0c9a      	lsrs	r2, r3, #18
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001730:	e002      	b.n	8001738 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	3b01      	subs	r3, #1
 8001736:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f9      	bne.n	8001732 <HAL_ADC_ConfigChannel+0x1b2>
 800173e:	e007      	b.n	8001750 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001744:	f043 0220 	orr.w	r2, r3, #32
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001758:	7bfb      	ldrb	r3, [r7, #15]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr
 8001764:	40012400 	.word	0x40012400
 8001768:	20000060 	.word	0x20000060
 800176c:	431bde83 	.word	0x431bde83

08001770 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800177c:	2300      	movs	r3, #0
 800177e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b01      	cmp	r3, #1
 800178c:	d039      	beq.n	8001802 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f042 0201 	orr.w	r2, r2, #1
 800179c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800179e:	4b1b      	ldr	r3, [pc, #108]	; (800180c <ADC_Enable+0x9c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a1b      	ldr	r2, [pc, #108]	; (8001810 <ADC_Enable+0xa0>)
 80017a4:	fba2 2303 	umull	r2, r3, r2, r3
 80017a8:	0c9b      	lsrs	r3, r3, #18
 80017aa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017ac:	e002      	b.n	80017b4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	3b01      	subs	r3, #1
 80017b2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f9      	bne.n	80017ae <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017ba:	f7ff fbfb 	bl	8000fb4 <HAL_GetTick>
 80017be:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80017c0:	e018      	b.n	80017f4 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80017c2:	f7ff fbf7 	bl	8000fb4 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d911      	bls.n	80017f4 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d4:	f043 0210 	orr.w	r2, r3, #16
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e0:	f043 0201 	orr.w	r2, r3, #1
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e007      	b.n	8001804 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d1df      	bne.n	80017c2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000060 	.word	0x20000060
 8001810:	431bde83 	.word	0x431bde83

08001814 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b01      	cmp	r3, #1
 800182c:	d127      	bne.n	800187e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 0201 	bic.w	r2, r2, #1
 800183c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800183e:	f7ff fbb9 	bl	8000fb4 <HAL_GetTick>
 8001842:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001844:	e014      	b.n	8001870 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001846:	f7ff fbb5 	bl	8000fb4 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d90d      	bls.n	8001870 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001858:	f043 0210 	orr.w	r2, r3, #16
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001864:	f043 0201 	orr.w	r2, r3, #1
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e007      	b.n	8001880 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b01      	cmp	r3, #1
 800187c:	d0e3      	beq.n	8001846 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <__NVIC_SetPriorityGrouping+0x44>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800189e:	68ba      	ldr	r2, [r7, #8]
 80018a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018a4:	4013      	ands	r3, r2
 80018a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ba:	4a04      	ldr	r2, [pc, #16]	; (80018cc <__NVIC_SetPriorityGrouping+0x44>)
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	60d3      	str	r3, [r2, #12]
}
 80018c0:	bf00      	nop
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d4:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <__NVIC_GetPriorityGrouping+0x18>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	0a1b      	lsrs	r3, r3, #8
 80018da:	f003 0307 	and.w	r3, r3, #7
}
 80018de:	4618      	mov	r0, r3
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	db0b      	blt.n	8001916 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	f003 021f 	and.w	r2, r3, #31
 8001904:	4906      	ldr	r1, [pc, #24]	; (8001920 <__NVIC_EnableIRQ+0x34>)
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	095b      	lsrs	r3, r3, #5
 800190c:	2001      	movs	r0, #1
 800190e:	fa00 f202 	lsl.w	r2, r0, r2
 8001912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr
 8001920:	e000e100 	.word	0xe000e100

08001924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	6039      	str	r1, [r7, #0]
 800192e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001934:	2b00      	cmp	r3, #0
 8001936:	db0a      	blt.n	800194e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	b2da      	uxtb	r2, r3
 800193c:	490c      	ldr	r1, [pc, #48]	; (8001970 <__NVIC_SetPriority+0x4c>)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	0112      	lsls	r2, r2, #4
 8001944:	b2d2      	uxtb	r2, r2
 8001946:	440b      	add	r3, r1
 8001948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800194c:	e00a      	b.n	8001964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	b2da      	uxtb	r2, r3
 8001952:	4908      	ldr	r1, [pc, #32]	; (8001974 <__NVIC_SetPriority+0x50>)
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	3b04      	subs	r3, #4
 800195c:	0112      	lsls	r2, r2, #4
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	440b      	add	r3, r1
 8001962:	761a      	strb	r2, [r3, #24]
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	e000e100 	.word	0xe000e100
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001978:	b480      	push	{r7}
 800197a:	b089      	sub	sp, #36	; 0x24
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f1c3 0307 	rsb	r3, r3, #7
 8001992:	2b04      	cmp	r3, #4
 8001994:	bf28      	it	cs
 8001996:	2304      	movcs	r3, #4
 8001998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	3304      	adds	r3, #4
 800199e:	2b06      	cmp	r3, #6
 80019a0:	d902      	bls.n	80019a8 <NVIC_EncodePriority+0x30>
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3b03      	subs	r3, #3
 80019a6:	e000      	b.n	80019aa <NVIC_EncodePriority+0x32>
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ac:	f04f 32ff 	mov.w	r2, #4294967295
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43da      	mvns	r2, r3
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	401a      	ands	r2, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c0:	f04f 31ff 	mov.w	r1, #4294967295
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ca:	43d9      	mvns	r1, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d0:	4313      	orrs	r3, r2
         );
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3724      	adds	r7, #36	; 0x24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr

080019dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019ec:	d301      	bcc.n	80019f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ee:	2301      	movs	r3, #1
 80019f0:	e00f      	b.n	8001a12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019f2:	4a0a      	ldr	r2, [pc, #40]	; (8001a1c <SysTick_Config+0x40>)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019fa:	210f      	movs	r1, #15
 80019fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001a00:	f7ff ff90 	bl	8001924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <SysTick_Config+0x40>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a0a:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <SysTick_Config+0x40>)
 8001a0c:	2207      	movs	r2, #7
 8001a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	e000e010 	.word	0xe000e010

08001a20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff ff2d 	bl	8001888 <__NVIC_SetPriorityGrouping>
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b086      	sub	sp, #24
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
 8001a42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a48:	f7ff ff42 	bl	80018d0 <__NVIC_GetPriorityGrouping>
 8001a4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	68b9      	ldr	r1, [r7, #8]
 8001a52:	6978      	ldr	r0, [r7, #20]
 8001a54:	f7ff ff90 	bl	8001978 <NVIC_EncodePriority>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a5e:	4611      	mov	r1, r2
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff5f 	bl	8001924 <__NVIC_SetPriority>
}
 8001a66:	bf00      	nop
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4603      	mov	r3, r0
 8001a76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff35 	bl	80018ec <__NVIC_EnableIRQ>
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff ffa2 	bl	80019dc <SysTick_Config>
 8001a98:	4603      	mov	r3, r0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001aac:	2300      	movs	r3, #0
 8001aae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d005      	beq.n	8001ac6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2204      	movs	r2, #4
 8001abe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	73fb      	strb	r3, [r7, #15]
 8001ac4:	e051      	b.n	8001b6a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 020e 	bic.w	r2, r2, #14
 8001ad4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f022 0201 	bic.w	r2, r2, #1
 8001ae4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a22      	ldr	r2, [pc, #136]	; (8001b74 <HAL_DMA_Abort_IT+0xd0>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d029      	beq.n	8001b44 <HAL_DMA_Abort_IT+0xa0>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a20      	ldr	r2, [pc, #128]	; (8001b78 <HAL_DMA_Abort_IT+0xd4>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d022      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x9c>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a1f      	ldr	r2, [pc, #124]	; (8001b7c <HAL_DMA_Abort_IT+0xd8>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d01a      	beq.n	8001b3a <HAL_DMA_Abort_IT+0x96>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a1d      	ldr	r2, [pc, #116]	; (8001b80 <HAL_DMA_Abort_IT+0xdc>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d012      	beq.n	8001b34 <HAL_DMA_Abort_IT+0x90>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a1c      	ldr	r2, [pc, #112]	; (8001b84 <HAL_DMA_Abort_IT+0xe0>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d00a      	beq.n	8001b2e <HAL_DMA_Abort_IT+0x8a>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a1a      	ldr	r2, [pc, #104]	; (8001b88 <HAL_DMA_Abort_IT+0xe4>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d102      	bne.n	8001b28 <HAL_DMA_Abort_IT+0x84>
 8001b22:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b26:	e00e      	b.n	8001b46 <HAL_DMA_Abort_IT+0xa2>
 8001b28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b2c:	e00b      	b.n	8001b46 <HAL_DMA_Abort_IT+0xa2>
 8001b2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b32:	e008      	b.n	8001b46 <HAL_DMA_Abort_IT+0xa2>
 8001b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b38:	e005      	b.n	8001b46 <HAL_DMA_Abort_IT+0xa2>
 8001b3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b3e:	e002      	b.n	8001b46 <HAL_DMA_Abort_IT+0xa2>
 8001b40:	2310      	movs	r3, #16
 8001b42:	e000      	b.n	8001b46 <HAL_DMA_Abort_IT+0xa2>
 8001b44:	2301      	movs	r3, #1
 8001b46:	4a11      	ldr	r2, [pc, #68]	; (8001b8c <HAL_DMA_Abort_IT+0xe8>)
 8001b48:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	4798      	blx	r3
    } 
  }
  return status;
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40020008 	.word	0x40020008
 8001b78:	4002001c 	.word	0x4002001c
 8001b7c:	40020030 	.word	0x40020030
 8001b80:	40020044 	.word	0x40020044
 8001b84:	40020058 	.word	0x40020058
 8001b88:	4002006c 	.word	0x4002006c
 8001b8c:	40020000 	.word	0x40020000

08001b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b08b      	sub	sp, #44	; 0x2c
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba2:	e169      	b.n	8001e78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	69fa      	ldr	r2, [r7, #28]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	f040 8158 	bne.w	8001e72 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	4a9a      	ldr	r2, [pc, #616]	; (8001e30 <HAL_GPIO_Init+0x2a0>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d05e      	beq.n	8001c8a <HAL_GPIO_Init+0xfa>
 8001bcc:	4a98      	ldr	r2, [pc, #608]	; (8001e30 <HAL_GPIO_Init+0x2a0>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d875      	bhi.n	8001cbe <HAL_GPIO_Init+0x12e>
 8001bd2:	4a98      	ldr	r2, [pc, #608]	; (8001e34 <HAL_GPIO_Init+0x2a4>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d058      	beq.n	8001c8a <HAL_GPIO_Init+0xfa>
 8001bd8:	4a96      	ldr	r2, [pc, #600]	; (8001e34 <HAL_GPIO_Init+0x2a4>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d86f      	bhi.n	8001cbe <HAL_GPIO_Init+0x12e>
 8001bde:	4a96      	ldr	r2, [pc, #600]	; (8001e38 <HAL_GPIO_Init+0x2a8>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d052      	beq.n	8001c8a <HAL_GPIO_Init+0xfa>
 8001be4:	4a94      	ldr	r2, [pc, #592]	; (8001e38 <HAL_GPIO_Init+0x2a8>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d869      	bhi.n	8001cbe <HAL_GPIO_Init+0x12e>
 8001bea:	4a94      	ldr	r2, [pc, #592]	; (8001e3c <HAL_GPIO_Init+0x2ac>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d04c      	beq.n	8001c8a <HAL_GPIO_Init+0xfa>
 8001bf0:	4a92      	ldr	r2, [pc, #584]	; (8001e3c <HAL_GPIO_Init+0x2ac>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d863      	bhi.n	8001cbe <HAL_GPIO_Init+0x12e>
 8001bf6:	4a92      	ldr	r2, [pc, #584]	; (8001e40 <HAL_GPIO_Init+0x2b0>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d046      	beq.n	8001c8a <HAL_GPIO_Init+0xfa>
 8001bfc:	4a90      	ldr	r2, [pc, #576]	; (8001e40 <HAL_GPIO_Init+0x2b0>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d85d      	bhi.n	8001cbe <HAL_GPIO_Init+0x12e>
 8001c02:	2b12      	cmp	r3, #18
 8001c04:	d82a      	bhi.n	8001c5c <HAL_GPIO_Init+0xcc>
 8001c06:	2b12      	cmp	r3, #18
 8001c08:	d859      	bhi.n	8001cbe <HAL_GPIO_Init+0x12e>
 8001c0a:	a201      	add	r2, pc, #4	; (adr r2, 8001c10 <HAL_GPIO_Init+0x80>)
 8001c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c10:	08001c8b 	.word	0x08001c8b
 8001c14:	08001c65 	.word	0x08001c65
 8001c18:	08001c77 	.word	0x08001c77
 8001c1c:	08001cb9 	.word	0x08001cb9
 8001c20:	08001cbf 	.word	0x08001cbf
 8001c24:	08001cbf 	.word	0x08001cbf
 8001c28:	08001cbf 	.word	0x08001cbf
 8001c2c:	08001cbf 	.word	0x08001cbf
 8001c30:	08001cbf 	.word	0x08001cbf
 8001c34:	08001cbf 	.word	0x08001cbf
 8001c38:	08001cbf 	.word	0x08001cbf
 8001c3c:	08001cbf 	.word	0x08001cbf
 8001c40:	08001cbf 	.word	0x08001cbf
 8001c44:	08001cbf 	.word	0x08001cbf
 8001c48:	08001cbf 	.word	0x08001cbf
 8001c4c:	08001cbf 	.word	0x08001cbf
 8001c50:	08001cbf 	.word	0x08001cbf
 8001c54:	08001c6d 	.word	0x08001c6d
 8001c58:	08001c81 	.word	0x08001c81
 8001c5c:	4a79      	ldr	r2, [pc, #484]	; (8001e44 <HAL_GPIO_Init+0x2b4>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d013      	beq.n	8001c8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c62:	e02c      	b.n	8001cbe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	623b      	str	r3, [r7, #32]
          break;
 8001c6a:	e029      	b.n	8001cc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	3304      	adds	r3, #4
 8001c72:	623b      	str	r3, [r7, #32]
          break;
 8001c74:	e024      	b.n	8001cc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	3308      	adds	r3, #8
 8001c7c:	623b      	str	r3, [r7, #32]
          break;
 8001c7e:	e01f      	b.n	8001cc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	330c      	adds	r3, #12
 8001c86:	623b      	str	r3, [r7, #32]
          break;
 8001c88:	e01a      	b.n	8001cc0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d102      	bne.n	8001c98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c92:	2304      	movs	r3, #4
 8001c94:	623b      	str	r3, [r7, #32]
          break;
 8001c96:	e013      	b.n	8001cc0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d105      	bne.n	8001cac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ca0:	2308      	movs	r3, #8
 8001ca2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69fa      	ldr	r2, [r7, #28]
 8001ca8:	611a      	str	r2, [r3, #16]
          break;
 8001caa:	e009      	b.n	8001cc0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cac:	2308      	movs	r3, #8
 8001cae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69fa      	ldr	r2, [r7, #28]
 8001cb4:	615a      	str	r2, [r3, #20]
          break;
 8001cb6:	e003      	b.n	8001cc0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	623b      	str	r3, [r7, #32]
          break;
 8001cbc:	e000      	b.n	8001cc0 <HAL_GPIO_Init+0x130>
          break;
 8001cbe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	2bff      	cmp	r3, #255	; 0xff
 8001cc4:	d801      	bhi.n	8001cca <HAL_GPIO_Init+0x13a>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	e001      	b.n	8001cce <HAL_GPIO_Init+0x13e>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	3304      	adds	r3, #4
 8001cce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	2bff      	cmp	r3, #255	; 0xff
 8001cd4:	d802      	bhi.n	8001cdc <HAL_GPIO_Init+0x14c>
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	e002      	b.n	8001ce2 <HAL_GPIO_Init+0x152>
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	3b08      	subs	r3, #8
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	210f      	movs	r1, #15
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	401a      	ands	r2, r3
 8001cf4:	6a39      	ldr	r1, [r7, #32]
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 80b1 	beq.w	8001e72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d10:	4b4d      	ldr	r3, [pc, #308]	; (8001e48 <HAL_GPIO_Init+0x2b8>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	4a4c      	ldr	r2, [pc, #304]	; (8001e48 <HAL_GPIO_Init+0x2b8>)
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	6193      	str	r3, [r2, #24]
 8001d1c:	4b4a      	ldr	r3, [pc, #296]	; (8001e48 <HAL_GPIO_Init+0x2b8>)
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d28:	4a48      	ldr	r2, [pc, #288]	; (8001e4c <HAL_GPIO_Init+0x2bc>)
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	089b      	lsrs	r3, r3, #2
 8001d2e:	3302      	adds	r3, #2
 8001d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	220f      	movs	r2, #15
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a40      	ldr	r2, [pc, #256]	; (8001e50 <HAL_GPIO_Init+0x2c0>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d013      	beq.n	8001d7c <HAL_GPIO_Init+0x1ec>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a3f      	ldr	r2, [pc, #252]	; (8001e54 <HAL_GPIO_Init+0x2c4>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d00d      	beq.n	8001d78 <HAL_GPIO_Init+0x1e8>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a3e      	ldr	r2, [pc, #248]	; (8001e58 <HAL_GPIO_Init+0x2c8>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d007      	beq.n	8001d74 <HAL_GPIO_Init+0x1e4>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a3d      	ldr	r2, [pc, #244]	; (8001e5c <HAL_GPIO_Init+0x2cc>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d101      	bne.n	8001d70 <HAL_GPIO_Init+0x1e0>
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e006      	b.n	8001d7e <HAL_GPIO_Init+0x1ee>
 8001d70:	2304      	movs	r3, #4
 8001d72:	e004      	b.n	8001d7e <HAL_GPIO_Init+0x1ee>
 8001d74:	2302      	movs	r3, #2
 8001d76:	e002      	b.n	8001d7e <HAL_GPIO_Init+0x1ee>
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e000      	b.n	8001d7e <HAL_GPIO_Init+0x1ee>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d80:	f002 0203 	and.w	r2, r2, #3
 8001d84:	0092      	lsls	r2, r2, #2
 8001d86:	4093      	lsls	r3, r2
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d8e:	492f      	ldr	r1, [pc, #188]	; (8001e4c <HAL_GPIO_Init+0x2bc>)
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	089b      	lsrs	r3, r3, #2
 8001d94:	3302      	adds	r3, #2
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d006      	beq.n	8001db6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001da8:	4b2d      	ldr	r3, [pc, #180]	; (8001e60 <HAL_GPIO_Init+0x2d0>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	492c      	ldr	r1, [pc, #176]	; (8001e60 <HAL_GPIO_Init+0x2d0>)
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	600b      	str	r3, [r1, #0]
 8001db4:	e006      	b.n	8001dc4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001db6:	4b2a      	ldr	r3, [pc, #168]	; (8001e60 <HAL_GPIO_Init+0x2d0>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	4928      	ldr	r1, [pc, #160]	; (8001e60 <HAL_GPIO_Init+0x2d0>)
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d006      	beq.n	8001dde <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001dd0:	4b23      	ldr	r3, [pc, #140]	; (8001e60 <HAL_GPIO_Init+0x2d0>)
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	4922      	ldr	r1, [pc, #136]	; (8001e60 <HAL_GPIO_Init+0x2d0>)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	604b      	str	r3, [r1, #4]
 8001ddc:	e006      	b.n	8001dec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dde:	4b20      	ldr	r3, [pc, #128]	; (8001e60 <HAL_GPIO_Init+0x2d0>)
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	43db      	mvns	r3, r3
 8001de6:	491e      	ldr	r1, [pc, #120]	; (8001e60 <HAL_GPIO_Init+0x2d0>)
 8001de8:	4013      	ands	r3, r2
 8001dea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d006      	beq.n	8001e06 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001df8:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <HAL_GPIO_Init+0x2d0>)
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	4918      	ldr	r1, [pc, #96]	; (8001e60 <HAL_GPIO_Init+0x2d0>)
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	608b      	str	r3, [r1, #8]
 8001e04:	e006      	b.n	8001e14 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e06:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <HAL_GPIO_Init+0x2d0>)
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	4914      	ldr	r1, [pc, #80]	; (8001e60 <HAL_GPIO_Init+0x2d0>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d021      	beq.n	8001e64 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e20:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <HAL_GPIO_Init+0x2d0>)
 8001e22:	68da      	ldr	r2, [r3, #12]
 8001e24:	490e      	ldr	r1, [pc, #56]	; (8001e60 <HAL_GPIO_Init+0x2d0>)
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	60cb      	str	r3, [r1, #12]
 8001e2c:	e021      	b.n	8001e72 <HAL_GPIO_Init+0x2e2>
 8001e2e:	bf00      	nop
 8001e30:	10320000 	.word	0x10320000
 8001e34:	10310000 	.word	0x10310000
 8001e38:	10220000 	.word	0x10220000
 8001e3c:	10210000 	.word	0x10210000
 8001e40:	10120000 	.word	0x10120000
 8001e44:	10110000 	.word	0x10110000
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40010000 	.word	0x40010000
 8001e50:	40010800 	.word	0x40010800
 8001e54:	40010c00 	.word	0x40010c00
 8001e58:	40011000 	.word	0x40011000
 8001e5c:	40011400 	.word	0x40011400
 8001e60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e64:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <HAL_GPIO_Init+0x304>)
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	4909      	ldr	r1, [pc, #36]	; (8001e94 <HAL_GPIO_Init+0x304>)
 8001e6e:	4013      	ands	r3, r2
 8001e70:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	3301      	adds	r3, #1
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f47f ae8e 	bne.w	8001ba4 <HAL_GPIO_Init+0x14>
  }
}
 8001e88:	bf00      	nop
 8001e8a:	bf00      	nop
 8001e8c:	372c      	adds	r7, #44	; 0x2c
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr
 8001e94:	40010400 	.word	0x40010400

08001e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	807b      	strh	r3, [r7, #2]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ea8:	787b      	ldrb	r3, [r7, #1]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eae:	887a      	ldrh	r2, [r7, #2]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001eb4:	e003      	b.n	8001ebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001eb6:	887b      	ldrh	r3, [r7, #2]
 8001eb8:	041a      	lsls	r2, r3, #16
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	611a      	str	r2, [r3, #16]
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e26c      	b.n	80023b4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 8087 	beq.w	8001ff6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ee8:	4b92      	ldr	r3, [pc, #584]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 030c 	and.w	r3, r3, #12
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d00c      	beq.n	8001f0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ef4:	4b8f      	ldr	r3, [pc, #572]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 030c 	and.w	r3, r3, #12
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d112      	bne.n	8001f26 <HAL_RCC_OscConfig+0x5e>
 8001f00:	4b8c      	ldr	r3, [pc, #560]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f0c:	d10b      	bne.n	8001f26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f0e:	4b89      	ldr	r3, [pc, #548]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d06c      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x12c>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d168      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e246      	b.n	80023b4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f2e:	d106      	bne.n	8001f3e <HAL_RCC_OscConfig+0x76>
 8001f30:	4b80      	ldr	r3, [pc, #512]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a7f      	ldr	r2, [pc, #508]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	e02e      	b.n	8001f9c <HAL_RCC_OscConfig+0xd4>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10c      	bne.n	8001f60 <HAL_RCC_OscConfig+0x98>
 8001f46:	4b7b      	ldr	r3, [pc, #492]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a7a      	ldr	r2, [pc, #488]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	4b78      	ldr	r3, [pc, #480]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a77      	ldr	r2, [pc, #476]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f5c:	6013      	str	r3, [r2, #0]
 8001f5e:	e01d      	b.n	8001f9c <HAL_RCC_OscConfig+0xd4>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f68:	d10c      	bne.n	8001f84 <HAL_RCC_OscConfig+0xbc>
 8001f6a:	4b72      	ldr	r3, [pc, #456]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a71      	ldr	r2, [pc, #452]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	4b6f      	ldr	r3, [pc, #444]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a6e      	ldr	r2, [pc, #440]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	e00b      	b.n	8001f9c <HAL_RCC_OscConfig+0xd4>
 8001f84:	4b6b      	ldr	r3, [pc, #428]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a6a      	ldr	r2, [pc, #424]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f8e:	6013      	str	r3, [r2, #0]
 8001f90:	4b68      	ldr	r3, [pc, #416]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a67      	ldr	r2, [pc, #412]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d013      	beq.n	8001fcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa4:	f7ff f806 	bl	8000fb4 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fac:	f7ff f802 	bl	8000fb4 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b64      	cmp	r3, #100	; 0x64
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e1fa      	b.n	80023b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fbe:	4b5d      	ldr	r3, [pc, #372]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0f0      	beq.n	8001fac <HAL_RCC_OscConfig+0xe4>
 8001fca:	e014      	b.n	8001ff6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fcc:	f7fe fff2 	bl	8000fb4 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd4:	f7fe ffee 	bl	8000fb4 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b64      	cmp	r3, #100	; 0x64
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e1e6      	b.n	80023b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe6:	4b53      	ldr	r3, [pc, #332]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f0      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x10c>
 8001ff2:	e000      	b.n	8001ff6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d063      	beq.n	80020ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002002:	4b4c      	ldr	r3, [pc, #304]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f003 030c 	and.w	r3, r3, #12
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00b      	beq.n	8002026 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800200e:	4b49      	ldr	r3, [pc, #292]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 030c 	and.w	r3, r3, #12
 8002016:	2b08      	cmp	r3, #8
 8002018:	d11c      	bne.n	8002054 <HAL_RCC_OscConfig+0x18c>
 800201a:	4b46      	ldr	r3, [pc, #280]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d116      	bne.n	8002054 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002026:	4b43      	ldr	r3, [pc, #268]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d005      	beq.n	800203e <HAL_RCC_OscConfig+0x176>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d001      	beq.n	800203e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e1ba      	b.n	80023b4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800203e:	4b3d      	ldr	r3, [pc, #244]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	4939      	ldr	r1, [pc, #228]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 800204e:	4313      	orrs	r3, r2
 8002050:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002052:	e03a      	b.n	80020ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d020      	beq.n	800209e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800205c:	4b36      	ldr	r3, [pc, #216]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 800205e:	2201      	movs	r2, #1
 8002060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002062:	f7fe ffa7 	bl	8000fb4 <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800206a:	f7fe ffa3 	bl	8000fb4 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e19b      	b.n	80023b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207c:	4b2d      	ldr	r3, [pc, #180]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0f0      	beq.n	800206a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002088:	4b2a      	ldr	r3, [pc, #168]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4927      	ldr	r1, [pc, #156]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8002098:	4313      	orrs	r3, r2
 800209a:	600b      	str	r3, [r1, #0]
 800209c:	e015      	b.n	80020ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800209e:	4b26      	ldr	r3, [pc, #152]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a4:	f7fe ff86 	bl	8000fb4 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ac:	f7fe ff82 	bl	8000fb4 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e17a      	b.n	80023b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020be:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f0      	bne.n	80020ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d03a      	beq.n	800214c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d019      	beq.n	8002112 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020de:	4b17      	ldr	r3, [pc, #92]	; (800213c <HAL_RCC_OscConfig+0x274>)
 80020e0:	2201      	movs	r2, #1
 80020e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e4:	f7fe ff66 	bl	8000fb4 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ec:	f7fe ff62 	bl	8000fb4 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e15a      	b.n	80023b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fe:	4b0d      	ldr	r3, [pc, #52]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0f0      	beq.n	80020ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800210a:	2001      	movs	r0, #1
 800210c:	f000 fad8 	bl	80026c0 <RCC_Delay>
 8002110:	e01c      	b.n	800214c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002112:	4b0a      	ldr	r3, [pc, #40]	; (800213c <HAL_RCC_OscConfig+0x274>)
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002118:	f7fe ff4c 	bl	8000fb4 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800211e:	e00f      	b.n	8002140 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002120:	f7fe ff48 	bl	8000fb4 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d908      	bls.n	8002140 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e140      	b.n	80023b4 <HAL_RCC_OscConfig+0x4ec>
 8002132:	bf00      	nop
 8002134:	40021000 	.word	0x40021000
 8002138:	42420000 	.word	0x42420000
 800213c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002140:	4b9e      	ldr	r3, [pc, #632]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1e9      	bne.n	8002120 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 80a6 	beq.w	80022a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800215a:	2300      	movs	r3, #0
 800215c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800215e:	4b97      	ldr	r3, [pc, #604]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10d      	bne.n	8002186 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800216a:	4b94      	ldr	r3, [pc, #592]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	4a93      	ldr	r2, [pc, #588]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 8002170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002174:	61d3      	str	r3, [r2, #28]
 8002176:	4b91      	ldr	r3, [pc, #580]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002182:	2301      	movs	r3, #1
 8002184:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002186:	4b8e      	ldr	r3, [pc, #568]	; (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218e:	2b00      	cmp	r3, #0
 8002190:	d118      	bne.n	80021c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002192:	4b8b      	ldr	r3, [pc, #556]	; (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a8a      	ldr	r2, [pc, #552]	; (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 8002198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800219c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800219e:	f7fe ff09 	bl	8000fb4 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021a6:	f7fe ff05 	bl	8000fb4 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b64      	cmp	r3, #100	; 0x64
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e0fd      	b.n	80023b4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b8:	4b81      	ldr	r3, [pc, #516]	; (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0f0      	beq.n	80021a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d106      	bne.n	80021da <HAL_RCC_OscConfig+0x312>
 80021cc:	4b7b      	ldr	r3, [pc, #492]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	4a7a      	ldr	r2, [pc, #488]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	6213      	str	r3, [r2, #32]
 80021d8:	e02d      	b.n	8002236 <HAL_RCC_OscConfig+0x36e>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10c      	bne.n	80021fc <HAL_RCC_OscConfig+0x334>
 80021e2:	4b76      	ldr	r3, [pc, #472]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	4a75      	ldr	r2, [pc, #468]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 80021e8:	f023 0301 	bic.w	r3, r3, #1
 80021ec:	6213      	str	r3, [r2, #32]
 80021ee:	4b73      	ldr	r3, [pc, #460]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	4a72      	ldr	r2, [pc, #456]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 80021f4:	f023 0304 	bic.w	r3, r3, #4
 80021f8:	6213      	str	r3, [r2, #32]
 80021fa:	e01c      	b.n	8002236 <HAL_RCC_OscConfig+0x36e>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	2b05      	cmp	r3, #5
 8002202:	d10c      	bne.n	800221e <HAL_RCC_OscConfig+0x356>
 8002204:	4b6d      	ldr	r3, [pc, #436]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	4a6c      	ldr	r2, [pc, #432]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 800220a:	f043 0304 	orr.w	r3, r3, #4
 800220e:	6213      	str	r3, [r2, #32]
 8002210:	4b6a      	ldr	r3, [pc, #424]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	4a69      	ldr	r2, [pc, #420]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	6213      	str	r3, [r2, #32]
 800221c:	e00b      	b.n	8002236 <HAL_RCC_OscConfig+0x36e>
 800221e:	4b67      	ldr	r3, [pc, #412]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	4a66      	ldr	r2, [pc, #408]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 8002224:	f023 0301 	bic.w	r3, r3, #1
 8002228:	6213      	str	r3, [r2, #32]
 800222a:	4b64      	ldr	r3, [pc, #400]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	4a63      	ldr	r2, [pc, #396]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 8002230:	f023 0304 	bic.w	r3, r3, #4
 8002234:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d015      	beq.n	800226a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800223e:	f7fe feb9 	bl	8000fb4 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002244:	e00a      	b.n	800225c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002246:	f7fe feb5 	bl	8000fb4 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	f241 3288 	movw	r2, #5000	; 0x1388
 8002254:	4293      	cmp	r3, r2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e0ab      	b.n	80023b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800225c:	4b57      	ldr	r3, [pc, #348]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0ee      	beq.n	8002246 <HAL_RCC_OscConfig+0x37e>
 8002268:	e014      	b.n	8002294 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800226a:	f7fe fea3 	bl	8000fb4 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002270:	e00a      	b.n	8002288 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002272:	f7fe fe9f 	bl	8000fb4 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002280:	4293      	cmp	r3, r2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e095      	b.n	80023b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002288:	4b4c      	ldr	r3, [pc, #304]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1ee      	bne.n	8002272 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002294:	7dfb      	ldrb	r3, [r7, #23]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d105      	bne.n	80022a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800229a:	4b48      	ldr	r3, [pc, #288]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	4a47      	ldr	r2, [pc, #284]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 80022a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 8081 	beq.w	80023b2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022b0:	4b42      	ldr	r3, [pc, #264]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 030c 	and.w	r3, r3, #12
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	d061      	beq.n	8002380 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	69db      	ldr	r3, [r3, #28]
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d146      	bne.n	8002352 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c4:	4b3f      	ldr	r3, [pc, #252]	; (80023c4 <HAL_RCC_OscConfig+0x4fc>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ca:	f7fe fe73 	bl	8000fb4 <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d2:	f7fe fe6f 	bl	8000fb4 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e067      	b.n	80023b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e4:	4b35      	ldr	r3, [pc, #212]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1f0      	bne.n	80022d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022f8:	d108      	bne.n	800230c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022fa:	4b30      	ldr	r3, [pc, #192]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	492d      	ldr	r1, [pc, #180]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 8002308:	4313      	orrs	r3, r2
 800230a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800230c:	4b2b      	ldr	r3, [pc, #172]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a19      	ldr	r1, [r3, #32]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	430b      	orrs	r3, r1
 800231e:	4927      	ldr	r1, [pc, #156]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 8002320:	4313      	orrs	r3, r2
 8002322:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002324:	4b27      	ldr	r3, [pc, #156]	; (80023c4 <HAL_RCC_OscConfig+0x4fc>)
 8002326:	2201      	movs	r2, #1
 8002328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232a:	f7fe fe43 	bl	8000fb4 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002332:	f7fe fe3f 	bl	8000fb4 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e037      	b.n	80023b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002344:	4b1d      	ldr	r3, [pc, #116]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0f0      	beq.n	8002332 <HAL_RCC_OscConfig+0x46a>
 8002350:	e02f      	b.n	80023b2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002352:	4b1c      	ldr	r3, [pc, #112]	; (80023c4 <HAL_RCC_OscConfig+0x4fc>)
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002358:	f7fe fe2c 	bl	8000fb4 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002360:	f7fe fe28 	bl	8000fb4 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e020      	b.n	80023b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002372:	4b12      	ldr	r3, [pc, #72]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f0      	bne.n	8002360 <HAL_RCC_OscConfig+0x498>
 800237e:	e018      	b.n	80023b2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d101      	bne.n	800238c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e013      	b.n	80023b4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800238c:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	429a      	cmp	r2, r3
 800239e:	d106      	bne.n	80023ae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d001      	beq.n	80023b2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e000      	b.n	80023b4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40021000 	.word	0x40021000
 80023c0:	40007000 	.word	0x40007000
 80023c4:	42420060 	.word	0x42420060

080023c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e0d0      	b.n	800257e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023dc:	4b6a      	ldr	r3, [pc, #424]	; (8002588 <HAL_RCC_ClockConfig+0x1c0>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d910      	bls.n	800240c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ea:	4b67      	ldr	r3, [pc, #412]	; (8002588 <HAL_RCC_ClockConfig+0x1c0>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f023 0207 	bic.w	r2, r3, #7
 80023f2:	4965      	ldr	r1, [pc, #404]	; (8002588 <HAL_RCC_ClockConfig+0x1c0>)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fa:	4b63      	ldr	r3, [pc, #396]	; (8002588 <HAL_RCC_ClockConfig+0x1c0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	429a      	cmp	r2, r3
 8002406:	d001      	beq.n	800240c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0b8      	b.n	800257e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d020      	beq.n	800245a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b00      	cmp	r3, #0
 8002422:	d005      	beq.n	8002430 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002424:	4b59      	ldr	r3, [pc, #356]	; (800258c <HAL_RCC_ClockConfig+0x1c4>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	4a58      	ldr	r2, [pc, #352]	; (800258c <HAL_RCC_ClockConfig+0x1c4>)
 800242a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800242e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0308 	and.w	r3, r3, #8
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800243c:	4b53      	ldr	r3, [pc, #332]	; (800258c <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	4a52      	ldr	r2, [pc, #328]	; (800258c <HAL_RCC_ClockConfig+0x1c4>)
 8002442:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002446:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002448:	4b50      	ldr	r3, [pc, #320]	; (800258c <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	494d      	ldr	r1, [pc, #308]	; (800258c <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	4313      	orrs	r3, r2
 8002458:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d040      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d107      	bne.n	800247e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246e:	4b47      	ldr	r3, [pc, #284]	; (800258c <HAL_RCC_ClockConfig+0x1c4>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d115      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e07f      	b.n	800257e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b02      	cmp	r3, #2
 8002484:	d107      	bne.n	8002496 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002486:	4b41      	ldr	r3, [pc, #260]	; (800258c <HAL_RCC_ClockConfig+0x1c4>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d109      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e073      	b.n	800257e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002496:	4b3d      	ldr	r3, [pc, #244]	; (800258c <HAL_RCC_ClockConfig+0x1c4>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e06b      	b.n	800257e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024a6:	4b39      	ldr	r3, [pc, #228]	; (800258c <HAL_RCC_ClockConfig+0x1c4>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f023 0203 	bic.w	r2, r3, #3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	4936      	ldr	r1, [pc, #216]	; (800258c <HAL_RCC_ClockConfig+0x1c4>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024b8:	f7fe fd7c 	bl	8000fb4 <HAL_GetTick>
 80024bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024be:	e00a      	b.n	80024d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c0:	f7fe fd78 	bl	8000fb4 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e053      	b.n	800257e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d6:	4b2d      	ldr	r3, [pc, #180]	; (800258c <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 020c 	and.w	r2, r3, #12
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d1eb      	bne.n	80024c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024e8:	4b27      	ldr	r3, [pc, #156]	; (8002588 <HAL_RCC_ClockConfig+0x1c0>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d210      	bcs.n	8002518 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f6:	4b24      	ldr	r3, [pc, #144]	; (8002588 <HAL_RCC_ClockConfig+0x1c0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f023 0207 	bic.w	r2, r3, #7
 80024fe:	4922      	ldr	r1, [pc, #136]	; (8002588 <HAL_RCC_ClockConfig+0x1c0>)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	4313      	orrs	r3, r2
 8002504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002506:	4b20      	ldr	r3, [pc, #128]	; (8002588 <HAL_RCC_ClockConfig+0x1c0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d001      	beq.n	8002518 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e032      	b.n	800257e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	d008      	beq.n	8002536 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002524:	4b19      	ldr	r3, [pc, #100]	; (800258c <HAL_RCC_ClockConfig+0x1c4>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	4916      	ldr	r1, [pc, #88]	; (800258c <HAL_RCC_ClockConfig+0x1c4>)
 8002532:	4313      	orrs	r3, r2
 8002534:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	2b00      	cmp	r3, #0
 8002540:	d009      	beq.n	8002556 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002542:	4b12      	ldr	r3, [pc, #72]	; (800258c <HAL_RCC_ClockConfig+0x1c4>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	490e      	ldr	r1, [pc, #56]	; (800258c <HAL_RCC_ClockConfig+0x1c4>)
 8002552:	4313      	orrs	r3, r2
 8002554:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002556:	f000 f821 	bl	800259c <HAL_RCC_GetSysClockFreq>
 800255a:	4602      	mov	r2, r0
 800255c:	4b0b      	ldr	r3, [pc, #44]	; (800258c <HAL_RCC_ClockConfig+0x1c4>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	091b      	lsrs	r3, r3, #4
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	490a      	ldr	r1, [pc, #40]	; (8002590 <HAL_RCC_ClockConfig+0x1c8>)
 8002568:	5ccb      	ldrb	r3, [r1, r3]
 800256a:	fa22 f303 	lsr.w	r3, r2, r3
 800256e:	4a09      	ldr	r2, [pc, #36]	; (8002594 <HAL_RCC_ClockConfig+0x1cc>)
 8002570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002572:	4b09      	ldr	r3, [pc, #36]	; (8002598 <HAL_RCC_ClockConfig+0x1d0>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f7fe fcda 	bl	8000f30 <HAL_InitTick>

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40022000 	.word	0x40022000
 800258c:	40021000 	.word	0x40021000
 8002590:	080044dc 	.word	0x080044dc
 8002594:	20000060 	.word	0x20000060
 8002598:	20000064 	.word	0x20000064

0800259c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800259c:	b490      	push	{r4, r7}
 800259e:	b08a      	sub	sp, #40	; 0x28
 80025a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80025a2:	4b2a      	ldr	r3, [pc, #168]	; (800264c <HAL_RCC_GetSysClockFreq+0xb0>)
 80025a4:	1d3c      	adds	r4, r7, #4
 80025a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80025ac:	f240 2301 	movw	r3, #513	; 0x201
 80025b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61fb      	str	r3, [r7, #28]
 80025b6:	2300      	movs	r3, #0
 80025b8:	61bb      	str	r3, [r7, #24]
 80025ba:	2300      	movs	r3, #0
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
 80025be:	2300      	movs	r3, #0
 80025c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025c6:	4b22      	ldr	r3, [pc, #136]	; (8002650 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f003 030c 	and.w	r3, r3, #12
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	d002      	beq.n	80025dc <HAL_RCC_GetSysClockFreq+0x40>
 80025d6:	2b08      	cmp	r3, #8
 80025d8:	d003      	beq.n	80025e2 <HAL_RCC_GetSysClockFreq+0x46>
 80025da:	e02d      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025dc:	4b1d      	ldr	r3, [pc, #116]	; (8002654 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025de:	623b      	str	r3, [r7, #32]
      break;
 80025e0:	e02d      	b.n	800263e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	0c9b      	lsrs	r3, r3, #18
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025ee:	4413      	add	r3, r2
 80025f0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80025f4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d013      	beq.n	8002628 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002600:	4b13      	ldr	r3, [pc, #76]	; (8002650 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	0c5b      	lsrs	r3, r3, #17
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800260e:	4413      	add	r3, r2
 8002610:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002614:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	4a0e      	ldr	r2, [pc, #56]	; (8002654 <HAL_RCC_GetSysClockFreq+0xb8>)
 800261a:	fb02 f203 	mul.w	r2, r2, r3
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	fbb2 f3f3 	udiv	r3, r2, r3
 8002624:	627b      	str	r3, [r7, #36]	; 0x24
 8002626:	e004      	b.n	8002632 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	4a0b      	ldr	r2, [pc, #44]	; (8002658 <HAL_RCC_GetSysClockFreq+0xbc>)
 800262c:	fb02 f303 	mul.w	r3, r2, r3
 8002630:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	623b      	str	r3, [r7, #32]
      break;
 8002636:	e002      	b.n	800263e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002638:	4b06      	ldr	r3, [pc, #24]	; (8002654 <HAL_RCC_GetSysClockFreq+0xb8>)
 800263a:	623b      	str	r3, [r7, #32]
      break;
 800263c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800263e:	6a3b      	ldr	r3, [r7, #32]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3728      	adds	r7, #40	; 0x28
 8002644:	46bd      	mov	sp, r7
 8002646:	bc90      	pop	{r4, r7}
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	080044bc 	.word	0x080044bc
 8002650:	40021000 	.word	0x40021000
 8002654:	007a1200 	.word	0x007a1200
 8002658:	003d0900 	.word	0x003d0900

0800265c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002660:	4b02      	ldr	r3, [pc, #8]	; (800266c <HAL_RCC_GetHCLKFreq+0x10>)
 8002662:	681b      	ldr	r3, [r3, #0]
}
 8002664:	4618      	mov	r0, r3
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr
 800266c:	20000060 	.word	0x20000060

08002670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002674:	f7ff fff2 	bl	800265c <HAL_RCC_GetHCLKFreq>
 8002678:	4602      	mov	r2, r0
 800267a:	4b05      	ldr	r3, [pc, #20]	; (8002690 <HAL_RCC_GetPCLK1Freq+0x20>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	0a1b      	lsrs	r3, r3, #8
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	4903      	ldr	r1, [pc, #12]	; (8002694 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002686:	5ccb      	ldrb	r3, [r1, r3]
 8002688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800268c:	4618      	mov	r0, r3
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40021000 	.word	0x40021000
 8002694:	080044ec 	.word	0x080044ec

08002698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800269c:	f7ff ffde 	bl	800265c <HAL_RCC_GetHCLKFreq>
 80026a0:	4602      	mov	r2, r0
 80026a2:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	0adb      	lsrs	r3, r3, #11
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	4903      	ldr	r1, [pc, #12]	; (80026bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80026ae:	5ccb      	ldrb	r3, [r1, r3]
 80026b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40021000 	.word	0x40021000
 80026bc:	080044ec 	.word	0x080044ec

080026c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026c8:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <RCC_Delay+0x34>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a0a      	ldr	r2, [pc, #40]	; (80026f8 <RCC_Delay+0x38>)
 80026ce:	fba2 2303 	umull	r2, r3, r2, r3
 80026d2:	0a5b      	lsrs	r3, r3, #9
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	fb02 f303 	mul.w	r3, r2, r3
 80026da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026dc:	bf00      	nop
  }
  while (Delay --);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	1e5a      	subs	r2, r3, #1
 80026e2:	60fa      	str	r2, [r7, #12]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1f9      	bne.n	80026dc <RCC_Delay+0x1c>
}
 80026e8:	bf00      	nop
 80026ea:	bf00      	nop
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr
 80026f4:	20000060 	.word	0x20000060
 80026f8:	10624dd3 	.word	0x10624dd3

080026fc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002704:	2300      	movs	r3, #0
 8002706:	613b      	str	r3, [r7, #16]
 8002708:	2300      	movs	r3, #0
 800270a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b00      	cmp	r3, #0
 8002716:	d07d      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002718:	2300      	movs	r3, #0
 800271a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800271c:	4b4f      	ldr	r3, [pc, #316]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10d      	bne.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002728:	4b4c      	ldr	r3, [pc, #304]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	4a4b      	ldr	r2, [pc, #300]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800272e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002732:	61d3      	str	r3, [r2, #28]
 8002734:	4b49      	ldr	r3, [pc, #292]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273c:	60bb      	str	r3, [r7, #8]
 800273e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002740:	2301      	movs	r3, #1
 8002742:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002744:	4b46      	ldr	r3, [pc, #280]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274c:	2b00      	cmp	r3, #0
 800274e:	d118      	bne.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002750:	4b43      	ldr	r3, [pc, #268]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a42      	ldr	r2, [pc, #264]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800275c:	f7fe fc2a 	bl	8000fb4 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002762:	e008      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002764:	f7fe fc26 	bl	8000fb4 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b64      	cmp	r3, #100	; 0x64
 8002770:	d901      	bls.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e06d      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002776:	4b3a      	ldr	r3, [pc, #232]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0f0      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002782:	4b36      	ldr	r3, [pc, #216]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800278a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d02e      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	429a      	cmp	r2, r3
 800279e:	d027      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027a0:	4b2e      	ldr	r3, [pc, #184]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027a8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027aa:	4b2e      	ldr	r3, [pc, #184]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027ac:	2201      	movs	r2, #1
 80027ae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027b0:	4b2c      	ldr	r3, [pc, #176]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80027b6:	4a29      	ldr	r2, [pc, #164]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d014      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c6:	f7fe fbf5 	bl	8000fb4 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027cc:	e00a      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ce:	f7fe fbf1 	bl	8000fb4 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027dc:	4293      	cmp	r3, r2
 80027de:	d901      	bls.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e036      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e4:	4b1d      	ldr	r3, [pc, #116]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0ee      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027f0:	4b1a      	ldr	r3, [pc, #104]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	4917      	ldr	r1, [pc, #92]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002802:	7dfb      	ldrb	r3, [r7, #23]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d105      	bne.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002808:	4b14      	ldr	r3, [pc, #80]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	4a13      	ldr	r2, [pc, #76]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800280e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002812:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d008      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002820:	4b0e      	ldr	r3, [pc, #56]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	490b      	ldr	r1, [pc, #44]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800282e:	4313      	orrs	r3, r2
 8002830:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0310 	and.w	r3, r3, #16
 800283a:	2b00      	cmp	r3, #0
 800283c:	d008      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800283e:	4b07      	ldr	r3, [pc, #28]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	4904      	ldr	r1, [pc, #16]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800284c:	4313      	orrs	r3, r2
 800284e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40021000 	.word	0x40021000
 8002860:	40007000 	.word	0x40007000
 8002864:	42420440 	.word	0x42420440

08002868 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002868:	b590      	push	{r4, r7, lr}
 800286a:	b08d      	sub	sp, #52	; 0x34
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002870:	4b5a      	ldr	r3, [pc, #360]	; (80029dc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002872:	f107 040c 	add.w	r4, r7, #12
 8002876:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002878:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800287c:	f240 2301 	movw	r3, #513	; 0x201
 8002880:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002882:	2300      	movs	r3, #0
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
 8002886:	2300      	movs	r3, #0
 8002888:	62fb      	str	r3, [r7, #44]	; 0x2c
 800288a:	2300      	movs	r3, #0
 800288c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800288e:	2300      	movs	r3, #0
 8002890:	61fb      	str	r3, [r7, #28]
 8002892:	2300      	movs	r3, #0
 8002894:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b10      	cmp	r3, #16
 800289a:	d00a      	beq.n	80028b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b10      	cmp	r3, #16
 80028a0:	f200 8091 	bhi.w	80029c6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d04c      	beq.n	8002944 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d07c      	beq.n	80029aa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80028b0:	e089      	b.n	80029c6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80028b2:	4b4b      	ldr	r3, [pc, #300]	; (80029e0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80028b8:	4b49      	ldr	r3, [pc, #292]	; (80029e0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 8082 	beq.w	80029ca <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	0c9b      	lsrs	r3, r3, #18
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80028d2:	4413      	add	r3, r2
 80028d4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80028d8:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d018      	beq.n	8002916 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028e4:	4b3e      	ldr	r3, [pc, #248]	; (80029e0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	0c5b      	lsrs	r3, r3, #17
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80028f2:	4413      	add	r3, r2
 80028f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00d      	beq.n	8002920 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002904:	4a37      	ldr	r2, [pc, #220]	; (80029e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	fbb2 f2f3 	udiv	r2, r2, r3
 800290c:	6a3b      	ldr	r3, [r7, #32]
 800290e:	fb02 f303 	mul.w	r3, r2, r3
 8002912:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002914:	e004      	b.n	8002920 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002916:	6a3b      	ldr	r3, [r7, #32]
 8002918:	4a33      	ldr	r2, [pc, #204]	; (80029e8 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 800291a:	fb02 f303 	mul.w	r3, r2, r3
 800291e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002920:	4b2f      	ldr	r3, [pc, #188]	; (80029e0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002928:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800292c:	d102      	bne.n	8002934 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 800292e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002930:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002932:	e04a      	b.n	80029ca <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8002934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	4a2c      	ldr	r2, [pc, #176]	; (80029ec <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 800293a:	fba2 2303 	umull	r2, r3, r2, r3
 800293e:	085b      	lsrs	r3, r3, #1
 8002940:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002942:	e042      	b.n	80029ca <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8002944:	4b26      	ldr	r3, [pc, #152]	; (80029e0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002954:	d108      	bne.n	8002968 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8002960:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002964:	62bb      	str	r3, [r7, #40]	; 0x28
 8002966:	e01f      	b.n	80029a8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800296e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002972:	d109      	bne.n	8002988 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8002974:	4b1a      	ldr	r3, [pc, #104]	; (80029e0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8002980:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002984:	62bb      	str	r3, [r7, #40]	; 0x28
 8002986:	e00f      	b.n	80029a8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800298e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002992:	d11c      	bne.n	80029ce <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002994:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d016      	beq.n	80029ce <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80029a0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80029a4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80029a6:	e012      	b.n	80029ce <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80029a8:	e011      	b.n	80029ce <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80029aa:	f7ff fe75 	bl	8002698 <HAL_RCC_GetPCLK2Freq>
 80029ae:	4602      	mov	r2, r0
 80029b0:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	0b9b      	lsrs	r3, r3, #14
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	3301      	adds	r3, #1
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80029c4:	e004      	b.n	80029d0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80029c6:	bf00      	nop
 80029c8:	e002      	b.n	80029d0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80029ca:	bf00      	nop
 80029cc:	e000      	b.n	80029d0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80029ce:	bf00      	nop
    }
  }
  return (frequency);
 80029d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3734      	adds	r7, #52	; 0x34
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd90      	pop	{r4, r7, pc}
 80029da:	bf00      	nop
 80029dc:	080044cc 	.word	0x080044cc
 80029e0:	40021000 	.word	0x40021000
 80029e4:	007a1200 	.word	0x007a1200
 80029e8:	003d0900 	.word	0x003d0900
 80029ec:	aaaaaaab 	.word	0xaaaaaaab

080029f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e076      	b.n	8002af0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d108      	bne.n	8002a1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a12:	d009      	beq.n	8002a28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	61da      	str	r2, [r3, #28]
 8002a1a:	e005      	b.n	8002a28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d106      	bne.n	8002a48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7fe f8b0 	bl	8000ba8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a70:	431a      	orrs	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	431a      	orrs	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aac:	ea42 0103 	orr.w	r1, r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	0c1a      	lsrs	r2, r3, #16
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f002 0204 	and.w	r2, r2, #4
 8002ace:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	69da      	ldr	r2, [r3, #28]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ade:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e041      	b.n	8002b8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d106      	bne.n	8002b24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7fe f88c 	bl	8000c3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3304      	adds	r3, #4
 8002b34:	4619      	mov	r1, r3
 8002b36:	4610      	mov	r0, r2
 8002b38:	f000 fa70 	bl	800301c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
	...

08002b98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d001      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e03a      	b.n	8002c26 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0201 	orr.w	r2, r2, #1
 8002bc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a18      	ldr	r2, [pc, #96]	; (8002c30 <HAL_TIM_Base_Start_IT+0x98>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d00e      	beq.n	8002bf0 <HAL_TIM_Base_Start_IT+0x58>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bda:	d009      	beq.n	8002bf0 <HAL_TIM_Base_Start_IT+0x58>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a14      	ldr	r2, [pc, #80]	; (8002c34 <HAL_TIM_Base_Start_IT+0x9c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d004      	beq.n	8002bf0 <HAL_TIM_Base_Start_IT+0x58>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a13      	ldr	r2, [pc, #76]	; (8002c38 <HAL_TIM_Base_Start_IT+0xa0>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d111      	bne.n	8002c14 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2b06      	cmp	r3, #6
 8002c00:	d010      	beq.n	8002c24 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f042 0201 	orr.w	r2, r2, #1
 8002c10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c12:	e007      	b.n	8002c24 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 0201 	orr.w	r2, r2, #1
 8002c22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr
 8002c30:	40012c00 	.word	0x40012c00
 8002c34:	40000400 	.word	0x40000400
 8002c38:	40000800 	.word	0x40000800

08002c3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d122      	bne.n	8002c98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d11b      	bne.n	8002c98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f06f 0202 	mvn.w	r2, #2
 8002c68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f9b1 	bl	8002fe6 <HAL_TIM_IC_CaptureCallback>
 8002c84:	e005      	b.n	8002c92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f9a4 	bl	8002fd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f9b3 	bl	8002ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f003 0304 	and.w	r3, r3, #4
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d122      	bne.n	8002cec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d11b      	bne.n	8002cec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f06f 0204 	mvn.w	r2, #4
 8002cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f987 	bl	8002fe6 <HAL_TIM_IC_CaptureCallback>
 8002cd8:	e005      	b.n	8002ce6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f97a 	bl	8002fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f989 	bl	8002ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d122      	bne.n	8002d40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d11b      	bne.n	8002d40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f06f 0208 	mvn.w	r2, #8
 8002d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2204      	movs	r2, #4
 8002d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f95d 	bl	8002fe6 <HAL_TIM_IC_CaptureCallback>
 8002d2c:	e005      	b.n	8002d3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f950 	bl	8002fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 f95f 	bl	8002ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	f003 0310 	and.w	r3, r3, #16
 8002d4a:	2b10      	cmp	r3, #16
 8002d4c:	d122      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f003 0310 	and.w	r3, r3, #16
 8002d58:	2b10      	cmp	r3, #16
 8002d5a:	d11b      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f06f 0210 	mvn.w	r2, #16
 8002d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2208      	movs	r2, #8
 8002d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f933 	bl	8002fe6 <HAL_TIM_IC_CaptureCallback>
 8002d80:	e005      	b.n	8002d8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f926 	bl	8002fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f935 	bl	8002ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d10e      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d107      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f06f 0201 	mvn.w	r2, #1
 8002db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7fd fdc6 	bl	800094c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dca:	2b80      	cmp	r3, #128	; 0x80
 8002dcc:	d10e      	bne.n	8002dec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd8:	2b80      	cmp	r3, #128	; 0x80
 8002dda:	d107      	bne.n	8002dec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 fa77 	bl	80032da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df6:	2b40      	cmp	r3, #64	; 0x40
 8002df8:	d10e      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e04:	2b40      	cmp	r3, #64	; 0x40
 8002e06:	d107      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f8f9 	bl	800300a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	f003 0320 	and.w	r3, r3, #32
 8002e22:	2b20      	cmp	r3, #32
 8002e24:	d10e      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f003 0320 	and.w	r3, r3, #32
 8002e30:	2b20      	cmp	r3, #32
 8002e32:	d107      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f06f 0220 	mvn.w	r2, #32
 8002e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 fa42 	bl	80032c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e44:	bf00      	nop
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d101      	bne.n	8002e64 <HAL_TIM_ConfigClockSource+0x18>
 8002e60:	2302      	movs	r3, #2
 8002e62:	e0b3      	b.n	8002fcc <HAL_TIM_ConfigClockSource+0x180>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e8a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e9c:	d03e      	beq.n	8002f1c <HAL_TIM_ConfigClockSource+0xd0>
 8002e9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ea2:	f200 8087 	bhi.w	8002fb4 <HAL_TIM_ConfigClockSource+0x168>
 8002ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eaa:	f000 8085 	beq.w	8002fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eb2:	d87f      	bhi.n	8002fb4 <HAL_TIM_ConfigClockSource+0x168>
 8002eb4:	2b70      	cmp	r3, #112	; 0x70
 8002eb6:	d01a      	beq.n	8002eee <HAL_TIM_ConfigClockSource+0xa2>
 8002eb8:	2b70      	cmp	r3, #112	; 0x70
 8002eba:	d87b      	bhi.n	8002fb4 <HAL_TIM_ConfigClockSource+0x168>
 8002ebc:	2b60      	cmp	r3, #96	; 0x60
 8002ebe:	d050      	beq.n	8002f62 <HAL_TIM_ConfigClockSource+0x116>
 8002ec0:	2b60      	cmp	r3, #96	; 0x60
 8002ec2:	d877      	bhi.n	8002fb4 <HAL_TIM_ConfigClockSource+0x168>
 8002ec4:	2b50      	cmp	r3, #80	; 0x50
 8002ec6:	d03c      	beq.n	8002f42 <HAL_TIM_ConfigClockSource+0xf6>
 8002ec8:	2b50      	cmp	r3, #80	; 0x50
 8002eca:	d873      	bhi.n	8002fb4 <HAL_TIM_ConfigClockSource+0x168>
 8002ecc:	2b40      	cmp	r3, #64	; 0x40
 8002ece:	d058      	beq.n	8002f82 <HAL_TIM_ConfigClockSource+0x136>
 8002ed0:	2b40      	cmp	r3, #64	; 0x40
 8002ed2:	d86f      	bhi.n	8002fb4 <HAL_TIM_ConfigClockSource+0x168>
 8002ed4:	2b30      	cmp	r3, #48	; 0x30
 8002ed6:	d064      	beq.n	8002fa2 <HAL_TIM_ConfigClockSource+0x156>
 8002ed8:	2b30      	cmp	r3, #48	; 0x30
 8002eda:	d86b      	bhi.n	8002fb4 <HAL_TIM_ConfigClockSource+0x168>
 8002edc:	2b20      	cmp	r3, #32
 8002ede:	d060      	beq.n	8002fa2 <HAL_TIM_ConfigClockSource+0x156>
 8002ee0:	2b20      	cmp	r3, #32
 8002ee2:	d867      	bhi.n	8002fb4 <HAL_TIM_ConfigClockSource+0x168>
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d05c      	beq.n	8002fa2 <HAL_TIM_ConfigClockSource+0x156>
 8002ee8:	2b10      	cmp	r3, #16
 8002eea:	d05a      	beq.n	8002fa2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002eec:	e062      	b.n	8002fb4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6818      	ldr	r0, [r3, #0]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	6899      	ldr	r1, [r3, #8]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	f000 f966 	bl	80031ce <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f10:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	609a      	str	r2, [r3, #8]
      break;
 8002f1a:	e04e      	b.n	8002fba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6818      	ldr	r0, [r3, #0]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	6899      	ldr	r1, [r3, #8]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f000 f94f 	bl	80031ce <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f3e:	609a      	str	r2, [r3, #8]
      break;
 8002f40:	e03b      	b.n	8002fba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6818      	ldr	r0, [r3, #0]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	6859      	ldr	r1, [r3, #4]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	f000 f8c6 	bl	80030e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2150      	movs	r1, #80	; 0x50
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 f91d 	bl	800319a <TIM_ITRx_SetConfig>
      break;
 8002f60:	e02b      	b.n	8002fba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6818      	ldr	r0, [r3, #0]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	6859      	ldr	r1, [r3, #4]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	f000 f8e4 	bl	800313c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2160      	movs	r1, #96	; 0x60
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 f90d 	bl	800319a <TIM_ITRx_SetConfig>
      break;
 8002f80:	e01b      	b.n	8002fba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6818      	ldr	r0, [r3, #0]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	6859      	ldr	r1, [r3, #4]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	f000 f8a6 	bl	80030e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2140      	movs	r1, #64	; 0x40
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 f8fd 	bl	800319a <TIM_ITRx_SetConfig>
      break;
 8002fa0:	e00b      	b.n	8002fba <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4619      	mov	r1, r3
 8002fac:	4610      	mov	r0, r2
 8002fae:	f000 f8f4 	bl	800319a <TIM_ITRx_SetConfig>
        break;
 8002fb2:	e002      	b.n	8002fba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002fb4:	bf00      	nop
 8002fb6:	e000      	b.n	8002fba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002fb8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr

08002fe6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b083      	sub	sp, #12
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr

0800300a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800300a:	b480      	push	{r7}
 800300c:	b083      	sub	sp, #12
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr

0800301c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a29      	ldr	r2, [pc, #164]	; (80030d4 <TIM_Base_SetConfig+0xb8>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d00b      	beq.n	800304c <TIM_Base_SetConfig+0x30>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800303a:	d007      	beq.n	800304c <TIM_Base_SetConfig+0x30>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a26      	ldr	r2, [pc, #152]	; (80030d8 <TIM_Base_SetConfig+0xbc>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d003      	beq.n	800304c <TIM_Base_SetConfig+0x30>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a25      	ldr	r2, [pc, #148]	; (80030dc <TIM_Base_SetConfig+0xc0>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d108      	bne.n	800305e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	4313      	orrs	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a1c      	ldr	r2, [pc, #112]	; (80030d4 <TIM_Base_SetConfig+0xb8>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d00b      	beq.n	800307e <TIM_Base_SetConfig+0x62>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800306c:	d007      	beq.n	800307e <TIM_Base_SetConfig+0x62>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a19      	ldr	r2, [pc, #100]	; (80030d8 <TIM_Base_SetConfig+0xbc>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d003      	beq.n	800307e <TIM_Base_SetConfig+0x62>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a18      	ldr	r2, [pc, #96]	; (80030dc <TIM_Base_SetConfig+0xc0>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d108      	bne.n	8003090 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003084:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	4313      	orrs	r3, r2
 800308e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	4313      	orrs	r3, r2
 800309c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a07      	ldr	r2, [pc, #28]	; (80030d4 <TIM_Base_SetConfig+0xb8>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d103      	bne.n	80030c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	691a      	ldr	r2, [r3, #16]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	615a      	str	r2, [r3, #20]
}
 80030ca:	bf00      	nop
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr
 80030d4:	40012c00 	.word	0x40012c00
 80030d8:	40000400 	.word	0x40000400
 80030dc:	40000800 	.word	0x40000800

080030e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b087      	sub	sp, #28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	f023 0201 	bic.w	r2, r3, #1
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800310a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	011b      	lsls	r3, r3, #4
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	4313      	orrs	r3, r2
 8003114:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f023 030a 	bic.w	r3, r3, #10
 800311c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	4313      	orrs	r3, r2
 8003124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	621a      	str	r2, [r3, #32]
}
 8003132:	bf00      	nop
 8003134:	371c      	adds	r7, #28
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr

0800313c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800313c:	b480      	push	{r7}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	f023 0210 	bic.w	r2, r3, #16
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003166:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	031b      	lsls	r3, r3, #12
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	4313      	orrs	r3, r2
 8003170:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003178:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	621a      	str	r2, [r3, #32]
}
 8003190:	bf00      	nop
 8003192:	371c      	adds	r7, #28
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr

0800319a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800319a:	b480      	push	{r7}
 800319c:	b085      	sub	sp, #20
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
 80031a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f043 0307 	orr.w	r3, r3, #7
 80031bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	609a      	str	r2, [r3, #8]
}
 80031c4:	bf00      	nop
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bc80      	pop	{r7}
 80031cc:	4770      	bx	lr

080031ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b087      	sub	sp, #28
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	60f8      	str	r0, [r7, #12]
 80031d6:	60b9      	str	r1, [r7, #8]
 80031d8:	607a      	str	r2, [r7, #4]
 80031da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	021a      	lsls	r2, r3, #8
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	431a      	orrs	r2, r3
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	609a      	str	r2, [r3, #8]
}
 8003202:	bf00      	nop
 8003204:	371c      	adds	r7, #28
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr

0800320c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003220:	2302      	movs	r3, #2
 8003222:	e046      	b.n	80032b2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800324a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	4313      	orrs	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a16      	ldr	r2, [pc, #88]	; (80032bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d00e      	beq.n	8003286 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003270:	d009      	beq.n	8003286 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a12      	ldr	r2, [pc, #72]	; (80032c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d004      	beq.n	8003286 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a10      	ldr	r2, [pc, #64]	; (80032c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d10c      	bne.n	80032a0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800328c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	4313      	orrs	r3, r2
 8003296:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68ba      	ldr	r2, [r7, #8]
 800329e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr
 80032bc:	40012c00 	.word	0x40012c00
 80032c0:	40000400 	.word	0x40000400
 80032c4:	40000800 	.word	0x40000800

080032c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bc80      	pop	{r7}
 80032d8:	4770      	bx	lr

080032da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr

080032ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e03f      	b.n	800337e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d106      	bne.n	8003318 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7fd fcb8 	bl	8000c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2224      	movs	r2, #36	; 0x24
 800331c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800332e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 fb83 	bl	8003a3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	691a      	ldr	r2, [r3, #16]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003344:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	695a      	ldr	r2, [r3, #20]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003354:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68da      	ldr	r2, [r3, #12]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003364:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2220      	movs	r2, #32
 8003370:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b08a      	sub	sp, #40	; 0x28
 800338a:	af02      	add	r7, sp, #8
 800338c:	60f8      	str	r0, [r7, #12]
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	603b      	str	r3, [r7, #0]
 8003392:	4613      	mov	r3, r2
 8003394:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003396:	2300      	movs	r3, #0
 8003398:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b20      	cmp	r3, #32
 80033a4:	d17c      	bne.n	80034a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d002      	beq.n	80033b2 <HAL_UART_Transmit+0x2c>
 80033ac:	88fb      	ldrh	r3, [r7, #6]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e075      	b.n	80034a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d101      	bne.n	80033c4 <HAL_UART_Transmit+0x3e>
 80033c0:	2302      	movs	r3, #2
 80033c2:	e06e      	b.n	80034a2 <HAL_UART_Transmit+0x11c>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2221      	movs	r2, #33	; 0x21
 80033d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80033da:	f7fd fdeb 	bl	8000fb4 <HAL_GetTick>
 80033de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	88fa      	ldrh	r2, [r7, #6]
 80033e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	88fa      	ldrh	r2, [r7, #6]
 80033ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033f4:	d108      	bne.n	8003408 <HAL_UART_Transmit+0x82>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d104      	bne.n	8003408 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	61bb      	str	r3, [r7, #24]
 8003406:	e003      	b.n	8003410 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800340c:	2300      	movs	r3, #0
 800340e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003418:	e02a      	b.n	8003470 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	2200      	movs	r2, #0
 8003422:	2180      	movs	r1, #128	; 0x80
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f000 f9a7 	bl	8003778 <UART_WaitOnFlagUntilTimeout>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e036      	b.n	80034a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10b      	bne.n	8003452 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	461a      	mov	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003448:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	3302      	adds	r3, #2
 800344e:	61bb      	str	r3, [r7, #24]
 8003450:	e007      	b.n	8003462 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	781a      	ldrb	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	3301      	adds	r3, #1
 8003460:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003466:	b29b      	uxth	r3, r3
 8003468:	3b01      	subs	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003474:	b29b      	uxth	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1cf      	bne.n	800341a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2200      	movs	r2, #0
 8003482:	2140      	movs	r1, #64	; 0x40
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f000 f977 	bl	8003778 <UART_WaitOnFlagUntilTimeout>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e006      	b.n	80034a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800349c:	2300      	movs	r3, #0
 800349e:	e000      	b.n	80034a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80034a0:	2302      	movs	r3, #2
  }
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3720      	adds	r7, #32
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b085      	sub	sp, #20
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	60f8      	str	r0, [r7, #12]
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	4613      	mov	r3, r2
 80034b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b20      	cmp	r3, #32
 80034c2:	d140      	bne.n	8003546 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d002      	beq.n	80034d0 <HAL_UART_Receive_IT+0x26>
 80034ca:	88fb      	ldrh	r3, [r7, #6]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e039      	b.n	8003548 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d101      	bne.n	80034e2 <HAL_UART_Receive_IT+0x38>
 80034de:	2302      	movs	r3, #2
 80034e0:	e032      	b.n	8003548 <HAL_UART_Receive_IT+0x9e>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	88fa      	ldrh	r2, [r7, #6]
 80034f4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	88fa      	ldrh	r2, [r7, #6]
 80034fa:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2222      	movs	r2, #34	; 0x22
 8003506:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003520:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	695a      	ldr	r2, [r3, #20]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f042 0201 	orr.w	r2, r2, #1
 8003530:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68da      	ldr	r2, [r3, #12]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f042 0220 	orr.w	r2, r2, #32
 8003540:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003542:	2300      	movs	r3, #0
 8003544:	e000      	b.n	8003548 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003546:	2302      	movs	r3, #2
  }
}
 8003548:	4618      	mov	r0, r3
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	bc80      	pop	{r7}
 8003550:	4770      	bx	lr
	...

08003554 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b088      	sub	sp, #32
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003574:	2300      	movs	r3, #0
 8003576:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003578:	2300      	movs	r3, #0
 800357a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10d      	bne.n	80035a6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	f003 0320 	and.w	r3, r3, #32
 8003590:	2b00      	cmp	r3, #0
 8003592:	d008      	beq.n	80035a6 <HAL_UART_IRQHandler+0x52>
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	f003 0320 	and.w	r3, r3, #32
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f9cc 	bl	800393c <UART_Receive_IT>
      return;
 80035a4:	e0d0      	b.n	8003748 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 80b0 	beq.w	800370e <HAL_UART_IRQHandler+0x1ba>
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d105      	bne.n	80035c4 <HAL_UART_IRQHandler+0x70>
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 80a5 	beq.w	800370e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <HAL_UART_IRQHandler+0x90>
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d005      	beq.n	80035e4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035dc:	f043 0201 	orr.w	r2, r3, #1
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	f003 0304 	and.w	r3, r3, #4
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00a      	beq.n	8003604 <HAL_UART_IRQHandler+0xb0>
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fc:	f043 0202 	orr.w	r2, r3, #2
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00a      	beq.n	8003624 <HAL_UART_IRQHandler+0xd0>
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b00      	cmp	r3, #0
 8003616:	d005      	beq.n	8003624 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361c:	f043 0204 	orr.w	r2, r3, #4
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	f003 0308 	and.w	r3, r3, #8
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00f      	beq.n	800364e <HAL_UART_IRQHandler+0xfa>
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	f003 0320 	and.w	r3, r3, #32
 8003634:	2b00      	cmp	r3, #0
 8003636:	d104      	bne.n	8003642 <HAL_UART_IRQHandler+0xee>
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d005      	beq.n	800364e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003646:	f043 0208 	orr.w	r2, r3, #8
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003652:	2b00      	cmp	r3, #0
 8003654:	d077      	beq.n	8003746 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	f003 0320 	and.w	r3, r3, #32
 800365c:	2b00      	cmp	r3, #0
 800365e:	d007      	beq.n	8003670 <HAL_UART_IRQHandler+0x11c>
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	f003 0320 	and.w	r3, r3, #32
 8003666:	2b00      	cmp	r3, #0
 8003668:	d002      	beq.n	8003670 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f966 	bl	800393c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367a:	2b00      	cmp	r3, #0
 800367c:	bf14      	ite	ne
 800367e:	2301      	movne	r3, #1
 8003680:	2300      	moveq	r3, #0
 8003682:	b2db      	uxtb	r3, r3
 8003684:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800368a:	f003 0308 	and.w	r3, r3, #8
 800368e:	2b00      	cmp	r3, #0
 8003690:	d102      	bne.n	8003698 <HAL_UART_IRQHandler+0x144>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d031      	beq.n	80036fc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 f8b7 	bl	800380c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d023      	beq.n	80036f4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	695a      	ldr	r2, [r3, #20]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036ba:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d013      	beq.n	80036ec <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c8:	4a21      	ldr	r2, [pc, #132]	; (8003750 <HAL_UART_IRQHandler+0x1fc>)
 80036ca:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7fe f9e7 	bl	8001aa4 <HAL_DMA_Abort_IT>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d016      	beq.n	800370a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036e6:	4610      	mov	r0, r2
 80036e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ea:	e00e      	b.n	800370a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f83a 	bl	8003766 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f2:	e00a      	b.n	800370a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f836 	bl	8003766 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036fa:	e006      	b.n	800370a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f832 	bl	8003766 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003708:	e01d      	b.n	8003746 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800370a:	bf00      	nop
    return;
 800370c:	e01b      	b.n	8003746 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003714:	2b00      	cmp	r3, #0
 8003716:	d008      	beq.n	800372a <HAL_UART_IRQHandler+0x1d6>
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f8a3 	bl	800386e <UART_Transmit_IT>
    return;
 8003728:	e00e      	b.n	8003748 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003730:	2b00      	cmp	r3, #0
 8003732:	d009      	beq.n	8003748 <HAL_UART_IRQHandler+0x1f4>
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373a:	2b00      	cmp	r3, #0
 800373c:	d004      	beq.n	8003748 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f8e4 	bl	800390c <UART_EndTransmit_IT>
    return;
 8003744:	e000      	b.n	8003748 <HAL_UART_IRQHandler+0x1f4>
    return;
 8003746:	bf00      	nop
  }
}
 8003748:	3720      	adds	r7, #32
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	08003847 	.word	0x08003847

08003754 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	bc80      	pop	{r7}
 8003764:	4770      	bx	lr

08003766 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	bc80      	pop	{r7}
 8003776:	4770      	bx	lr

08003778 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	603b      	str	r3, [r7, #0]
 8003784:	4613      	mov	r3, r2
 8003786:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003788:	e02c      	b.n	80037e4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003790:	d028      	beq.n	80037e4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d007      	beq.n	80037a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003798:	f7fd fc0c 	bl	8000fb4 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d21d      	bcs.n	80037e4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037b6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	695a      	ldr	r2, [r3, #20]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0201 	bic.w	r2, r2, #1
 80037c6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2220      	movs	r2, #32
 80037d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e00f      	b.n	8003804 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	4013      	ands	r3, r2
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	bf0c      	ite	eq
 80037f4:	2301      	moveq	r3, #1
 80037f6:	2300      	movne	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	461a      	mov	r2, r3
 80037fc:	79fb      	ldrb	r3, [r7, #7]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d0c3      	beq.n	800378a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68da      	ldr	r2, [r3, #12]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003822:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695a      	ldr	r2, [r3, #20]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0201 	bic.w	r2, r2, #1
 8003832:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2220      	movs	r2, #32
 8003838:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	bc80      	pop	{r7}
 8003844:	4770      	bx	lr

08003846 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b084      	sub	sp, #16
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f7ff ff80 	bl	8003766 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003866:	bf00      	nop
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800386e:	b480      	push	{r7}
 8003870:	b085      	sub	sp, #20
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b21      	cmp	r3, #33	; 0x21
 8003880:	d13e      	bne.n	8003900 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800388a:	d114      	bne.n	80038b6 <UART_Transmit_IT+0x48>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d110      	bne.n	80038b6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	881b      	ldrh	r3, [r3, #0]
 800389e:	461a      	mov	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	1c9a      	adds	r2, r3, #2
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	621a      	str	r2, [r3, #32]
 80038b4:	e008      	b.n	80038c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	1c59      	adds	r1, r3, #1
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6211      	str	r1, [r2, #32]
 80038c0:	781a      	ldrb	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	4619      	mov	r1, r3
 80038d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10f      	bne.n	80038fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80038fc:	2300      	movs	r3, #0
 80038fe:	e000      	b.n	8003902 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003900:	2302      	movs	r3, #2
  }
}
 8003902:	4618      	mov	r0, r3
 8003904:	3714      	adds	r7, #20
 8003906:	46bd      	mov	sp, r7
 8003908:	bc80      	pop	{r7}
 800390a:	4770      	bx	lr

0800390c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003922:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2220      	movs	r2, #32
 8003928:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7ff ff11 	bl	8003754 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b22      	cmp	r3, #34	; 0x22
 800394e:	d170      	bne.n	8003a32 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003958:	d117      	bne.n	800398a <UART_Receive_IT+0x4e>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d113      	bne.n	800398a <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8003962:	2300      	movs	r3, #0
 8003964:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	b29b      	uxth	r3, r3
 8003974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003978:	b29a      	uxth	r2, r3
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003982:	1c9a      	adds	r2, r3, #2
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	629a      	str	r2, [r3, #40]	; 0x28
 8003988:	e026      	b.n	80039d8 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003990:	2300      	movs	r3, #0
 8003992:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800399c:	d007      	beq.n	80039ae <UART_Receive_IT+0x72>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10a      	bne.n	80039bc <UART_Receive_IT+0x80>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d106      	bne.n	80039bc <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	701a      	strb	r2, [r3, #0]
 80039ba:	e008      	b.n	80039ce <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d2:	1c5a      	adds	r2, r3, #1
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039dc:	b29b      	uxth	r3, r3
 80039de:	3b01      	subs	r3, #1
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	4619      	mov	r1, r3
 80039e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d120      	bne.n	8003a2e <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0220 	bic.w	r2, r2, #32
 80039fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68da      	ldr	r2, [r3, #12]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695a      	ldr	r2, [r3, #20]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0201 	bic.w	r2, r2, #1
 8003a1a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7fc ff05 	bl	8000834 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	e002      	b.n	8003a34 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	e000      	b.n	8003a34 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8003a32:	2302      	movs	r3, #2
  }
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689a      	ldr	r2, [r3, #8]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003a76:	f023 030c 	bic.w	r3, r3, #12
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6812      	ldr	r2, [r2, #0]
 8003a7e:	68b9      	ldr	r1, [r7, #8]
 8003a80:	430b      	orrs	r3, r1
 8003a82:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	699a      	ldr	r2, [r3, #24]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a2c      	ldr	r2, [pc, #176]	; (8003b50 <UART_SetConfig+0x114>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d103      	bne.n	8003aac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003aa4:	f7fe fdf8 	bl	8002698 <HAL_RCC_GetPCLK2Freq>
 8003aa8:	60f8      	str	r0, [r7, #12]
 8003aaa:	e002      	b.n	8003ab2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003aac:	f7fe fde0 	bl	8002670 <HAL_RCC_GetPCLK1Freq>
 8003ab0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	009a      	lsls	r2, r3, #2
 8003abc:	441a      	add	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac8:	4a22      	ldr	r2, [pc, #136]	; (8003b54 <UART_SetConfig+0x118>)
 8003aca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ace:	095b      	lsrs	r3, r3, #5
 8003ad0:	0119      	lsls	r1, r3, #4
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	009a      	lsls	r2, r3, #2
 8003adc:	441a      	add	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ae8:	4b1a      	ldr	r3, [pc, #104]	; (8003b54 <UART_SetConfig+0x118>)
 8003aea:	fba3 0302 	umull	r0, r3, r3, r2
 8003aee:	095b      	lsrs	r3, r3, #5
 8003af0:	2064      	movs	r0, #100	; 0x64
 8003af2:	fb00 f303 	mul.w	r3, r0, r3
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	011b      	lsls	r3, r3, #4
 8003afa:	3332      	adds	r3, #50	; 0x32
 8003afc:	4a15      	ldr	r2, [pc, #84]	; (8003b54 <UART_SetConfig+0x118>)
 8003afe:	fba2 2303 	umull	r2, r3, r2, r3
 8003b02:	095b      	lsrs	r3, r3, #5
 8003b04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b08:	4419      	add	r1, r3
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	009a      	lsls	r2, r3, #2
 8003b14:	441a      	add	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b20:	4b0c      	ldr	r3, [pc, #48]	; (8003b54 <UART_SetConfig+0x118>)
 8003b22:	fba3 0302 	umull	r0, r3, r3, r2
 8003b26:	095b      	lsrs	r3, r3, #5
 8003b28:	2064      	movs	r0, #100	; 0x64
 8003b2a:	fb00 f303 	mul.w	r3, r0, r3
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	011b      	lsls	r3, r3, #4
 8003b32:	3332      	adds	r3, #50	; 0x32
 8003b34:	4a07      	ldr	r2, [pc, #28]	; (8003b54 <UART_SetConfig+0x118>)
 8003b36:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3a:	095b      	lsrs	r3, r3, #5
 8003b3c:	f003 020f 	and.w	r2, r3, #15
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	440a      	add	r2, r1
 8003b46:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b48:	bf00      	nop
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	40013800 	.word	0x40013800
 8003b54:	51eb851f 	.word	0x51eb851f

08003b58 <__errno>:
 8003b58:	4b01      	ldr	r3, [pc, #4]	; (8003b60 <__errno+0x8>)
 8003b5a:	6818      	ldr	r0, [r3, #0]
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	2000006c 	.word	0x2000006c

08003b64 <__libc_init_array>:
 8003b64:	b570      	push	{r4, r5, r6, lr}
 8003b66:	2600      	movs	r6, #0
 8003b68:	4d0c      	ldr	r5, [pc, #48]	; (8003b9c <__libc_init_array+0x38>)
 8003b6a:	4c0d      	ldr	r4, [pc, #52]	; (8003ba0 <__libc_init_array+0x3c>)
 8003b6c:	1b64      	subs	r4, r4, r5
 8003b6e:	10a4      	asrs	r4, r4, #2
 8003b70:	42a6      	cmp	r6, r4
 8003b72:	d109      	bne.n	8003b88 <__libc_init_array+0x24>
 8003b74:	f000 fc78 	bl	8004468 <_init>
 8003b78:	2600      	movs	r6, #0
 8003b7a:	4d0a      	ldr	r5, [pc, #40]	; (8003ba4 <__libc_init_array+0x40>)
 8003b7c:	4c0a      	ldr	r4, [pc, #40]	; (8003ba8 <__libc_init_array+0x44>)
 8003b7e:	1b64      	subs	r4, r4, r5
 8003b80:	10a4      	asrs	r4, r4, #2
 8003b82:	42a6      	cmp	r6, r4
 8003b84:	d105      	bne.n	8003b92 <__libc_init_array+0x2e>
 8003b86:	bd70      	pop	{r4, r5, r6, pc}
 8003b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b8c:	4798      	blx	r3
 8003b8e:	3601      	adds	r6, #1
 8003b90:	e7ee      	b.n	8003b70 <__libc_init_array+0xc>
 8003b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b96:	4798      	blx	r3
 8003b98:	3601      	adds	r6, #1
 8003b9a:	e7f2      	b.n	8003b82 <__libc_init_array+0x1e>
 8003b9c:	08004628 	.word	0x08004628
 8003ba0:	08004628 	.word	0x08004628
 8003ba4:	08004628 	.word	0x08004628
 8003ba8:	0800462c 	.word	0x0800462c

08003bac <memset>:
 8003bac:	4603      	mov	r3, r0
 8003bae:	4402      	add	r2, r0
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d100      	bne.n	8003bb6 <memset+0xa>
 8003bb4:	4770      	bx	lr
 8003bb6:	f803 1b01 	strb.w	r1, [r3], #1
 8003bba:	e7f9      	b.n	8003bb0 <memset+0x4>

08003bbc <siprintf>:
 8003bbc:	b40e      	push	{r1, r2, r3}
 8003bbe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003bc2:	b500      	push	{lr}
 8003bc4:	b09c      	sub	sp, #112	; 0x70
 8003bc6:	ab1d      	add	r3, sp, #116	; 0x74
 8003bc8:	9002      	str	r0, [sp, #8]
 8003bca:	9006      	str	r0, [sp, #24]
 8003bcc:	9107      	str	r1, [sp, #28]
 8003bce:	9104      	str	r1, [sp, #16]
 8003bd0:	4808      	ldr	r0, [pc, #32]	; (8003bf4 <siprintf+0x38>)
 8003bd2:	4909      	ldr	r1, [pc, #36]	; (8003bf8 <siprintf+0x3c>)
 8003bd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bd8:	9105      	str	r1, [sp, #20]
 8003bda:	6800      	ldr	r0, [r0, #0]
 8003bdc:	a902      	add	r1, sp, #8
 8003bde:	9301      	str	r3, [sp, #4]
 8003be0:	f000 f884 	bl	8003cec <_svfiprintf_r>
 8003be4:	2200      	movs	r2, #0
 8003be6:	9b02      	ldr	r3, [sp, #8]
 8003be8:	701a      	strb	r2, [r3, #0]
 8003bea:	b01c      	add	sp, #112	; 0x70
 8003bec:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bf0:	b003      	add	sp, #12
 8003bf2:	4770      	bx	lr
 8003bf4:	2000006c 	.word	0x2000006c
 8003bf8:	ffff0208 	.word	0xffff0208

08003bfc <strcasecmp>:
 8003bfc:	b570      	push	{r4, r5, r6, lr}
 8003bfe:	4d0c      	ldr	r5, [pc, #48]	; (8003c30 <strcasecmp+0x34>)
 8003c00:	4604      	mov	r4, r0
 8003c02:	462e      	mov	r6, r5
 8003c04:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003c08:	5d5a      	ldrb	r2, [r3, r5]
 8003c0a:	f002 0203 	and.w	r2, r2, #3
 8003c0e:	2a01      	cmp	r2, #1
 8003c10:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c14:	bf08      	it	eq
 8003c16:	3320      	addeq	r3, #32
 8003c18:	5cb0      	ldrb	r0, [r6, r2]
 8003c1a:	f000 0003 	and.w	r0, r0, #3
 8003c1e:	2801      	cmp	r0, #1
 8003c20:	bf08      	it	eq
 8003c22:	3220      	addeq	r2, #32
 8003c24:	1a98      	subs	r0, r3, r2
 8003c26:	d101      	bne.n	8003c2c <strcasecmp+0x30>
 8003c28:	2a00      	cmp	r2, #0
 8003c2a:	d1eb      	bne.n	8003c04 <strcasecmp+0x8>
 8003c2c:	bd70      	pop	{r4, r5, r6, pc}
 8003c2e:	bf00      	nop
 8003c30:	080044f5 	.word	0x080044f5

08003c34 <__ssputs_r>:
 8003c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c38:	688e      	ldr	r6, [r1, #8]
 8003c3a:	4682      	mov	sl, r0
 8003c3c:	429e      	cmp	r6, r3
 8003c3e:	460c      	mov	r4, r1
 8003c40:	4690      	mov	r8, r2
 8003c42:	461f      	mov	r7, r3
 8003c44:	d838      	bhi.n	8003cb8 <__ssputs_r+0x84>
 8003c46:	898a      	ldrh	r2, [r1, #12]
 8003c48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c4c:	d032      	beq.n	8003cb4 <__ssputs_r+0x80>
 8003c4e:	6825      	ldr	r5, [r4, #0]
 8003c50:	6909      	ldr	r1, [r1, #16]
 8003c52:	3301      	adds	r3, #1
 8003c54:	eba5 0901 	sub.w	r9, r5, r1
 8003c58:	6965      	ldr	r5, [r4, #20]
 8003c5a:	444b      	add	r3, r9
 8003c5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c64:	106d      	asrs	r5, r5, #1
 8003c66:	429d      	cmp	r5, r3
 8003c68:	bf38      	it	cc
 8003c6a:	461d      	movcc	r5, r3
 8003c6c:	0553      	lsls	r3, r2, #21
 8003c6e:	d531      	bpl.n	8003cd4 <__ssputs_r+0xa0>
 8003c70:	4629      	mov	r1, r5
 8003c72:	f000 fb53 	bl	800431c <_malloc_r>
 8003c76:	4606      	mov	r6, r0
 8003c78:	b950      	cbnz	r0, 8003c90 <__ssputs_r+0x5c>
 8003c7a:	230c      	movs	r3, #12
 8003c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c80:	f8ca 3000 	str.w	r3, [sl]
 8003c84:	89a3      	ldrh	r3, [r4, #12]
 8003c86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c8a:	81a3      	strh	r3, [r4, #12]
 8003c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c90:	464a      	mov	r2, r9
 8003c92:	6921      	ldr	r1, [r4, #16]
 8003c94:	f000 face 	bl	8004234 <memcpy>
 8003c98:	89a3      	ldrh	r3, [r4, #12]
 8003c9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ca2:	81a3      	strh	r3, [r4, #12]
 8003ca4:	6126      	str	r6, [r4, #16]
 8003ca6:	444e      	add	r6, r9
 8003ca8:	6026      	str	r6, [r4, #0]
 8003caa:	463e      	mov	r6, r7
 8003cac:	6165      	str	r5, [r4, #20]
 8003cae:	eba5 0509 	sub.w	r5, r5, r9
 8003cb2:	60a5      	str	r5, [r4, #8]
 8003cb4:	42be      	cmp	r6, r7
 8003cb6:	d900      	bls.n	8003cba <__ssputs_r+0x86>
 8003cb8:	463e      	mov	r6, r7
 8003cba:	4632      	mov	r2, r6
 8003cbc:	4641      	mov	r1, r8
 8003cbe:	6820      	ldr	r0, [r4, #0]
 8003cc0:	f000 fac6 	bl	8004250 <memmove>
 8003cc4:	68a3      	ldr	r3, [r4, #8]
 8003cc6:	6822      	ldr	r2, [r4, #0]
 8003cc8:	1b9b      	subs	r3, r3, r6
 8003cca:	4432      	add	r2, r6
 8003ccc:	2000      	movs	r0, #0
 8003cce:	60a3      	str	r3, [r4, #8]
 8003cd0:	6022      	str	r2, [r4, #0]
 8003cd2:	e7db      	b.n	8003c8c <__ssputs_r+0x58>
 8003cd4:	462a      	mov	r2, r5
 8003cd6:	f000 fb7b 	bl	80043d0 <_realloc_r>
 8003cda:	4606      	mov	r6, r0
 8003cdc:	2800      	cmp	r0, #0
 8003cde:	d1e1      	bne.n	8003ca4 <__ssputs_r+0x70>
 8003ce0:	4650      	mov	r0, sl
 8003ce2:	6921      	ldr	r1, [r4, #16]
 8003ce4:	f000 face 	bl	8004284 <_free_r>
 8003ce8:	e7c7      	b.n	8003c7a <__ssputs_r+0x46>
	...

08003cec <_svfiprintf_r>:
 8003cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cf0:	4698      	mov	r8, r3
 8003cf2:	898b      	ldrh	r3, [r1, #12]
 8003cf4:	4607      	mov	r7, r0
 8003cf6:	061b      	lsls	r3, r3, #24
 8003cf8:	460d      	mov	r5, r1
 8003cfa:	4614      	mov	r4, r2
 8003cfc:	b09d      	sub	sp, #116	; 0x74
 8003cfe:	d50e      	bpl.n	8003d1e <_svfiprintf_r+0x32>
 8003d00:	690b      	ldr	r3, [r1, #16]
 8003d02:	b963      	cbnz	r3, 8003d1e <_svfiprintf_r+0x32>
 8003d04:	2140      	movs	r1, #64	; 0x40
 8003d06:	f000 fb09 	bl	800431c <_malloc_r>
 8003d0a:	6028      	str	r0, [r5, #0]
 8003d0c:	6128      	str	r0, [r5, #16]
 8003d0e:	b920      	cbnz	r0, 8003d1a <_svfiprintf_r+0x2e>
 8003d10:	230c      	movs	r3, #12
 8003d12:	603b      	str	r3, [r7, #0]
 8003d14:	f04f 30ff 	mov.w	r0, #4294967295
 8003d18:	e0d1      	b.n	8003ebe <_svfiprintf_r+0x1d2>
 8003d1a:	2340      	movs	r3, #64	; 0x40
 8003d1c:	616b      	str	r3, [r5, #20]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	9309      	str	r3, [sp, #36]	; 0x24
 8003d22:	2320      	movs	r3, #32
 8003d24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d28:	2330      	movs	r3, #48	; 0x30
 8003d2a:	f04f 0901 	mov.w	r9, #1
 8003d2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d32:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003ed8 <_svfiprintf_r+0x1ec>
 8003d36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d3a:	4623      	mov	r3, r4
 8003d3c:	469a      	mov	sl, r3
 8003d3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d42:	b10a      	cbz	r2, 8003d48 <_svfiprintf_r+0x5c>
 8003d44:	2a25      	cmp	r2, #37	; 0x25
 8003d46:	d1f9      	bne.n	8003d3c <_svfiprintf_r+0x50>
 8003d48:	ebba 0b04 	subs.w	fp, sl, r4
 8003d4c:	d00b      	beq.n	8003d66 <_svfiprintf_r+0x7a>
 8003d4e:	465b      	mov	r3, fp
 8003d50:	4622      	mov	r2, r4
 8003d52:	4629      	mov	r1, r5
 8003d54:	4638      	mov	r0, r7
 8003d56:	f7ff ff6d 	bl	8003c34 <__ssputs_r>
 8003d5a:	3001      	adds	r0, #1
 8003d5c:	f000 80aa 	beq.w	8003eb4 <_svfiprintf_r+0x1c8>
 8003d60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d62:	445a      	add	r2, fp
 8003d64:	9209      	str	r2, [sp, #36]	; 0x24
 8003d66:	f89a 3000 	ldrb.w	r3, [sl]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 80a2 	beq.w	8003eb4 <_svfiprintf_r+0x1c8>
 8003d70:	2300      	movs	r3, #0
 8003d72:	f04f 32ff 	mov.w	r2, #4294967295
 8003d76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d7a:	f10a 0a01 	add.w	sl, sl, #1
 8003d7e:	9304      	str	r3, [sp, #16]
 8003d80:	9307      	str	r3, [sp, #28]
 8003d82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d86:	931a      	str	r3, [sp, #104]	; 0x68
 8003d88:	4654      	mov	r4, sl
 8003d8a:	2205      	movs	r2, #5
 8003d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d90:	4851      	ldr	r0, [pc, #324]	; (8003ed8 <_svfiprintf_r+0x1ec>)
 8003d92:	f000 fa41 	bl	8004218 <memchr>
 8003d96:	9a04      	ldr	r2, [sp, #16]
 8003d98:	b9d8      	cbnz	r0, 8003dd2 <_svfiprintf_r+0xe6>
 8003d9a:	06d0      	lsls	r0, r2, #27
 8003d9c:	bf44      	itt	mi
 8003d9e:	2320      	movmi	r3, #32
 8003da0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003da4:	0711      	lsls	r1, r2, #28
 8003da6:	bf44      	itt	mi
 8003da8:	232b      	movmi	r3, #43	; 0x2b
 8003daa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dae:	f89a 3000 	ldrb.w	r3, [sl]
 8003db2:	2b2a      	cmp	r3, #42	; 0x2a
 8003db4:	d015      	beq.n	8003de2 <_svfiprintf_r+0xf6>
 8003db6:	4654      	mov	r4, sl
 8003db8:	2000      	movs	r0, #0
 8003dba:	f04f 0c0a 	mov.w	ip, #10
 8003dbe:	9a07      	ldr	r2, [sp, #28]
 8003dc0:	4621      	mov	r1, r4
 8003dc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dc6:	3b30      	subs	r3, #48	; 0x30
 8003dc8:	2b09      	cmp	r3, #9
 8003dca:	d94e      	bls.n	8003e6a <_svfiprintf_r+0x17e>
 8003dcc:	b1b0      	cbz	r0, 8003dfc <_svfiprintf_r+0x110>
 8003dce:	9207      	str	r2, [sp, #28]
 8003dd0:	e014      	b.n	8003dfc <_svfiprintf_r+0x110>
 8003dd2:	eba0 0308 	sub.w	r3, r0, r8
 8003dd6:	fa09 f303 	lsl.w	r3, r9, r3
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	46a2      	mov	sl, r4
 8003dde:	9304      	str	r3, [sp, #16]
 8003de0:	e7d2      	b.n	8003d88 <_svfiprintf_r+0x9c>
 8003de2:	9b03      	ldr	r3, [sp, #12]
 8003de4:	1d19      	adds	r1, r3, #4
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	9103      	str	r1, [sp, #12]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	bfbb      	ittet	lt
 8003dee:	425b      	neglt	r3, r3
 8003df0:	f042 0202 	orrlt.w	r2, r2, #2
 8003df4:	9307      	strge	r3, [sp, #28]
 8003df6:	9307      	strlt	r3, [sp, #28]
 8003df8:	bfb8      	it	lt
 8003dfa:	9204      	strlt	r2, [sp, #16]
 8003dfc:	7823      	ldrb	r3, [r4, #0]
 8003dfe:	2b2e      	cmp	r3, #46	; 0x2e
 8003e00:	d10c      	bne.n	8003e1c <_svfiprintf_r+0x130>
 8003e02:	7863      	ldrb	r3, [r4, #1]
 8003e04:	2b2a      	cmp	r3, #42	; 0x2a
 8003e06:	d135      	bne.n	8003e74 <_svfiprintf_r+0x188>
 8003e08:	9b03      	ldr	r3, [sp, #12]
 8003e0a:	3402      	adds	r4, #2
 8003e0c:	1d1a      	adds	r2, r3, #4
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	9203      	str	r2, [sp, #12]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	bfb8      	it	lt
 8003e16:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e1a:	9305      	str	r3, [sp, #20]
 8003e1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003ee8 <_svfiprintf_r+0x1fc>
 8003e20:	2203      	movs	r2, #3
 8003e22:	4650      	mov	r0, sl
 8003e24:	7821      	ldrb	r1, [r4, #0]
 8003e26:	f000 f9f7 	bl	8004218 <memchr>
 8003e2a:	b140      	cbz	r0, 8003e3e <_svfiprintf_r+0x152>
 8003e2c:	2340      	movs	r3, #64	; 0x40
 8003e2e:	eba0 000a 	sub.w	r0, r0, sl
 8003e32:	fa03 f000 	lsl.w	r0, r3, r0
 8003e36:	9b04      	ldr	r3, [sp, #16]
 8003e38:	3401      	adds	r4, #1
 8003e3a:	4303      	orrs	r3, r0
 8003e3c:	9304      	str	r3, [sp, #16]
 8003e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e42:	2206      	movs	r2, #6
 8003e44:	4825      	ldr	r0, [pc, #148]	; (8003edc <_svfiprintf_r+0x1f0>)
 8003e46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e4a:	f000 f9e5 	bl	8004218 <memchr>
 8003e4e:	2800      	cmp	r0, #0
 8003e50:	d038      	beq.n	8003ec4 <_svfiprintf_r+0x1d8>
 8003e52:	4b23      	ldr	r3, [pc, #140]	; (8003ee0 <_svfiprintf_r+0x1f4>)
 8003e54:	bb1b      	cbnz	r3, 8003e9e <_svfiprintf_r+0x1b2>
 8003e56:	9b03      	ldr	r3, [sp, #12]
 8003e58:	3307      	adds	r3, #7
 8003e5a:	f023 0307 	bic.w	r3, r3, #7
 8003e5e:	3308      	adds	r3, #8
 8003e60:	9303      	str	r3, [sp, #12]
 8003e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e64:	4433      	add	r3, r6
 8003e66:	9309      	str	r3, [sp, #36]	; 0x24
 8003e68:	e767      	b.n	8003d3a <_svfiprintf_r+0x4e>
 8003e6a:	460c      	mov	r4, r1
 8003e6c:	2001      	movs	r0, #1
 8003e6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e72:	e7a5      	b.n	8003dc0 <_svfiprintf_r+0xd4>
 8003e74:	2300      	movs	r3, #0
 8003e76:	f04f 0c0a 	mov.w	ip, #10
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	3401      	adds	r4, #1
 8003e7e:	9305      	str	r3, [sp, #20]
 8003e80:	4620      	mov	r0, r4
 8003e82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e86:	3a30      	subs	r2, #48	; 0x30
 8003e88:	2a09      	cmp	r2, #9
 8003e8a:	d903      	bls.n	8003e94 <_svfiprintf_r+0x1a8>
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0c5      	beq.n	8003e1c <_svfiprintf_r+0x130>
 8003e90:	9105      	str	r1, [sp, #20]
 8003e92:	e7c3      	b.n	8003e1c <_svfiprintf_r+0x130>
 8003e94:	4604      	mov	r4, r0
 8003e96:	2301      	movs	r3, #1
 8003e98:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e9c:	e7f0      	b.n	8003e80 <_svfiprintf_r+0x194>
 8003e9e:	ab03      	add	r3, sp, #12
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	462a      	mov	r2, r5
 8003ea4:	4638      	mov	r0, r7
 8003ea6:	4b0f      	ldr	r3, [pc, #60]	; (8003ee4 <_svfiprintf_r+0x1f8>)
 8003ea8:	a904      	add	r1, sp, #16
 8003eaa:	f3af 8000 	nop.w
 8003eae:	1c42      	adds	r2, r0, #1
 8003eb0:	4606      	mov	r6, r0
 8003eb2:	d1d6      	bne.n	8003e62 <_svfiprintf_r+0x176>
 8003eb4:	89ab      	ldrh	r3, [r5, #12]
 8003eb6:	065b      	lsls	r3, r3, #25
 8003eb8:	f53f af2c 	bmi.w	8003d14 <_svfiprintf_r+0x28>
 8003ebc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ebe:	b01d      	add	sp, #116	; 0x74
 8003ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ec4:	ab03      	add	r3, sp, #12
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	462a      	mov	r2, r5
 8003eca:	4638      	mov	r0, r7
 8003ecc:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <_svfiprintf_r+0x1f8>)
 8003ece:	a904      	add	r1, sp, #16
 8003ed0:	f000 f87c 	bl	8003fcc <_printf_i>
 8003ed4:	e7eb      	b.n	8003eae <_svfiprintf_r+0x1c2>
 8003ed6:	bf00      	nop
 8003ed8:	080045f5 	.word	0x080045f5
 8003edc:	080045ff 	.word	0x080045ff
 8003ee0:	00000000 	.word	0x00000000
 8003ee4:	08003c35 	.word	0x08003c35
 8003ee8:	080045fb 	.word	0x080045fb

08003eec <_printf_common>:
 8003eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ef0:	4616      	mov	r6, r2
 8003ef2:	4699      	mov	r9, r3
 8003ef4:	688a      	ldr	r2, [r1, #8]
 8003ef6:	690b      	ldr	r3, [r1, #16]
 8003ef8:	4607      	mov	r7, r0
 8003efa:	4293      	cmp	r3, r2
 8003efc:	bfb8      	it	lt
 8003efe:	4613      	movlt	r3, r2
 8003f00:	6033      	str	r3, [r6, #0]
 8003f02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f06:	460c      	mov	r4, r1
 8003f08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f0c:	b10a      	cbz	r2, 8003f12 <_printf_common+0x26>
 8003f0e:	3301      	adds	r3, #1
 8003f10:	6033      	str	r3, [r6, #0]
 8003f12:	6823      	ldr	r3, [r4, #0]
 8003f14:	0699      	lsls	r1, r3, #26
 8003f16:	bf42      	ittt	mi
 8003f18:	6833      	ldrmi	r3, [r6, #0]
 8003f1a:	3302      	addmi	r3, #2
 8003f1c:	6033      	strmi	r3, [r6, #0]
 8003f1e:	6825      	ldr	r5, [r4, #0]
 8003f20:	f015 0506 	ands.w	r5, r5, #6
 8003f24:	d106      	bne.n	8003f34 <_printf_common+0x48>
 8003f26:	f104 0a19 	add.w	sl, r4, #25
 8003f2a:	68e3      	ldr	r3, [r4, #12]
 8003f2c:	6832      	ldr	r2, [r6, #0]
 8003f2e:	1a9b      	subs	r3, r3, r2
 8003f30:	42ab      	cmp	r3, r5
 8003f32:	dc28      	bgt.n	8003f86 <_printf_common+0x9a>
 8003f34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f38:	1e13      	subs	r3, r2, #0
 8003f3a:	6822      	ldr	r2, [r4, #0]
 8003f3c:	bf18      	it	ne
 8003f3e:	2301      	movne	r3, #1
 8003f40:	0692      	lsls	r2, r2, #26
 8003f42:	d42d      	bmi.n	8003fa0 <_printf_common+0xb4>
 8003f44:	4649      	mov	r1, r9
 8003f46:	4638      	mov	r0, r7
 8003f48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f4c:	47c0      	blx	r8
 8003f4e:	3001      	adds	r0, #1
 8003f50:	d020      	beq.n	8003f94 <_printf_common+0xa8>
 8003f52:	6823      	ldr	r3, [r4, #0]
 8003f54:	68e5      	ldr	r5, [r4, #12]
 8003f56:	f003 0306 	and.w	r3, r3, #6
 8003f5a:	2b04      	cmp	r3, #4
 8003f5c:	bf18      	it	ne
 8003f5e:	2500      	movne	r5, #0
 8003f60:	6832      	ldr	r2, [r6, #0]
 8003f62:	f04f 0600 	mov.w	r6, #0
 8003f66:	68a3      	ldr	r3, [r4, #8]
 8003f68:	bf08      	it	eq
 8003f6a:	1aad      	subeq	r5, r5, r2
 8003f6c:	6922      	ldr	r2, [r4, #16]
 8003f6e:	bf08      	it	eq
 8003f70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f74:	4293      	cmp	r3, r2
 8003f76:	bfc4      	itt	gt
 8003f78:	1a9b      	subgt	r3, r3, r2
 8003f7a:	18ed      	addgt	r5, r5, r3
 8003f7c:	341a      	adds	r4, #26
 8003f7e:	42b5      	cmp	r5, r6
 8003f80:	d11a      	bne.n	8003fb8 <_printf_common+0xcc>
 8003f82:	2000      	movs	r0, #0
 8003f84:	e008      	b.n	8003f98 <_printf_common+0xac>
 8003f86:	2301      	movs	r3, #1
 8003f88:	4652      	mov	r2, sl
 8003f8a:	4649      	mov	r1, r9
 8003f8c:	4638      	mov	r0, r7
 8003f8e:	47c0      	blx	r8
 8003f90:	3001      	adds	r0, #1
 8003f92:	d103      	bne.n	8003f9c <_printf_common+0xb0>
 8003f94:	f04f 30ff 	mov.w	r0, #4294967295
 8003f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f9c:	3501      	adds	r5, #1
 8003f9e:	e7c4      	b.n	8003f2a <_printf_common+0x3e>
 8003fa0:	2030      	movs	r0, #48	; 0x30
 8003fa2:	18e1      	adds	r1, r4, r3
 8003fa4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fae:	4422      	add	r2, r4
 8003fb0:	3302      	adds	r3, #2
 8003fb2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fb6:	e7c5      	b.n	8003f44 <_printf_common+0x58>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	4622      	mov	r2, r4
 8003fbc:	4649      	mov	r1, r9
 8003fbe:	4638      	mov	r0, r7
 8003fc0:	47c0      	blx	r8
 8003fc2:	3001      	adds	r0, #1
 8003fc4:	d0e6      	beq.n	8003f94 <_printf_common+0xa8>
 8003fc6:	3601      	adds	r6, #1
 8003fc8:	e7d9      	b.n	8003f7e <_printf_common+0x92>
	...

08003fcc <_printf_i>:
 8003fcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fd0:	460c      	mov	r4, r1
 8003fd2:	7e27      	ldrb	r7, [r4, #24]
 8003fd4:	4691      	mov	r9, r2
 8003fd6:	2f78      	cmp	r7, #120	; 0x78
 8003fd8:	4680      	mov	r8, r0
 8003fda:	469a      	mov	sl, r3
 8003fdc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003fde:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fe2:	d807      	bhi.n	8003ff4 <_printf_i+0x28>
 8003fe4:	2f62      	cmp	r7, #98	; 0x62
 8003fe6:	d80a      	bhi.n	8003ffe <_printf_i+0x32>
 8003fe8:	2f00      	cmp	r7, #0
 8003fea:	f000 80d9 	beq.w	80041a0 <_printf_i+0x1d4>
 8003fee:	2f58      	cmp	r7, #88	; 0x58
 8003ff0:	f000 80a4 	beq.w	800413c <_printf_i+0x170>
 8003ff4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003ff8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ffc:	e03a      	b.n	8004074 <_printf_i+0xa8>
 8003ffe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004002:	2b15      	cmp	r3, #21
 8004004:	d8f6      	bhi.n	8003ff4 <_printf_i+0x28>
 8004006:	a001      	add	r0, pc, #4	; (adr r0, 800400c <_printf_i+0x40>)
 8004008:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800400c:	08004065 	.word	0x08004065
 8004010:	08004079 	.word	0x08004079
 8004014:	08003ff5 	.word	0x08003ff5
 8004018:	08003ff5 	.word	0x08003ff5
 800401c:	08003ff5 	.word	0x08003ff5
 8004020:	08003ff5 	.word	0x08003ff5
 8004024:	08004079 	.word	0x08004079
 8004028:	08003ff5 	.word	0x08003ff5
 800402c:	08003ff5 	.word	0x08003ff5
 8004030:	08003ff5 	.word	0x08003ff5
 8004034:	08003ff5 	.word	0x08003ff5
 8004038:	08004187 	.word	0x08004187
 800403c:	080040a9 	.word	0x080040a9
 8004040:	08004169 	.word	0x08004169
 8004044:	08003ff5 	.word	0x08003ff5
 8004048:	08003ff5 	.word	0x08003ff5
 800404c:	080041a9 	.word	0x080041a9
 8004050:	08003ff5 	.word	0x08003ff5
 8004054:	080040a9 	.word	0x080040a9
 8004058:	08003ff5 	.word	0x08003ff5
 800405c:	08003ff5 	.word	0x08003ff5
 8004060:	08004171 	.word	0x08004171
 8004064:	680b      	ldr	r3, [r1, #0]
 8004066:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800406a:	1d1a      	adds	r2, r3, #4
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	600a      	str	r2, [r1, #0]
 8004070:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004074:	2301      	movs	r3, #1
 8004076:	e0a4      	b.n	80041c2 <_printf_i+0x1f6>
 8004078:	6825      	ldr	r5, [r4, #0]
 800407a:	6808      	ldr	r0, [r1, #0]
 800407c:	062e      	lsls	r6, r5, #24
 800407e:	f100 0304 	add.w	r3, r0, #4
 8004082:	d50a      	bpl.n	800409a <_printf_i+0xce>
 8004084:	6805      	ldr	r5, [r0, #0]
 8004086:	600b      	str	r3, [r1, #0]
 8004088:	2d00      	cmp	r5, #0
 800408a:	da03      	bge.n	8004094 <_printf_i+0xc8>
 800408c:	232d      	movs	r3, #45	; 0x2d
 800408e:	426d      	negs	r5, r5
 8004090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004094:	230a      	movs	r3, #10
 8004096:	485e      	ldr	r0, [pc, #376]	; (8004210 <_printf_i+0x244>)
 8004098:	e019      	b.n	80040ce <_printf_i+0x102>
 800409a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800409e:	6805      	ldr	r5, [r0, #0]
 80040a0:	600b      	str	r3, [r1, #0]
 80040a2:	bf18      	it	ne
 80040a4:	b22d      	sxthne	r5, r5
 80040a6:	e7ef      	b.n	8004088 <_printf_i+0xbc>
 80040a8:	680b      	ldr	r3, [r1, #0]
 80040aa:	6825      	ldr	r5, [r4, #0]
 80040ac:	1d18      	adds	r0, r3, #4
 80040ae:	6008      	str	r0, [r1, #0]
 80040b0:	0628      	lsls	r0, r5, #24
 80040b2:	d501      	bpl.n	80040b8 <_printf_i+0xec>
 80040b4:	681d      	ldr	r5, [r3, #0]
 80040b6:	e002      	b.n	80040be <_printf_i+0xf2>
 80040b8:	0669      	lsls	r1, r5, #25
 80040ba:	d5fb      	bpl.n	80040b4 <_printf_i+0xe8>
 80040bc:	881d      	ldrh	r5, [r3, #0]
 80040be:	2f6f      	cmp	r7, #111	; 0x6f
 80040c0:	bf0c      	ite	eq
 80040c2:	2308      	moveq	r3, #8
 80040c4:	230a      	movne	r3, #10
 80040c6:	4852      	ldr	r0, [pc, #328]	; (8004210 <_printf_i+0x244>)
 80040c8:	2100      	movs	r1, #0
 80040ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040ce:	6866      	ldr	r6, [r4, #4]
 80040d0:	2e00      	cmp	r6, #0
 80040d2:	bfa8      	it	ge
 80040d4:	6821      	ldrge	r1, [r4, #0]
 80040d6:	60a6      	str	r6, [r4, #8]
 80040d8:	bfa4      	itt	ge
 80040da:	f021 0104 	bicge.w	r1, r1, #4
 80040de:	6021      	strge	r1, [r4, #0]
 80040e0:	b90d      	cbnz	r5, 80040e6 <_printf_i+0x11a>
 80040e2:	2e00      	cmp	r6, #0
 80040e4:	d04d      	beq.n	8004182 <_printf_i+0x1b6>
 80040e6:	4616      	mov	r6, r2
 80040e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80040ec:	fb03 5711 	mls	r7, r3, r1, r5
 80040f0:	5dc7      	ldrb	r7, [r0, r7]
 80040f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040f6:	462f      	mov	r7, r5
 80040f8:	42bb      	cmp	r3, r7
 80040fa:	460d      	mov	r5, r1
 80040fc:	d9f4      	bls.n	80040e8 <_printf_i+0x11c>
 80040fe:	2b08      	cmp	r3, #8
 8004100:	d10b      	bne.n	800411a <_printf_i+0x14e>
 8004102:	6823      	ldr	r3, [r4, #0]
 8004104:	07df      	lsls	r7, r3, #31
 8004106:	d508      	bpl.n	800411a <_printf_i+0x14e>
 8004108:	6923      	ldr	r3, [r4, #16]
 800410a:	6861      	ldr	r1, [r4, #4]
 800410c:	4299      	cmp	r1, r3
 800410e:	bfde      	ittt	le
 8004110:	2330      	movle	r3, #48	; 0x30
 8004112:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004116:	f106 36ff 	addle.w	r6, r6, #4294967295
 800411a:	1b92      	subs	r2, r2, r6
 800411c:	6122      	str	r2, [r4, #16]
 800411e:	464b      	mov	r3, r9
 8004120:	4621      	mov	r1, r4
 8004122:	4640      	mov	r0, r8
 8004124:	f8cd a000 	str.w	sl, [sp]
 8004128:	aa03      	add	r2, sp, #12
 800412a:	f7ff fedf 	bl	8003eec <_printf_common>
 800412e:	3001      	adds	r0, #1
 8004130:	d14c      	bne.n	80041cc <_printf_i+0x200>
 8004132:	f04f 30ff 	mov.w	r0, #4294967295
 8004136:	b004      	add	sp, #16
 8004138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800413c:	4834      	ldr	r0, [pc, #208]	; (8004210 <_printf_i+0x244>)
 800413e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004142:	680e      	ldr	r6, [r1, #0]
 8004144:	6823      	ldr	r3, [r4, #0]
 8004146:	f856 5b04 	ldr.w	r5, [r6], #4
 800414a:	061f      	lsls	r7, r3, #24
 800414c:	600e      	str	r6, [r1, #0]
 800414e:	d514      	bpl.n	800417a <_printf_i+0x1ae>
 8004150:	07d9      	lsls	r1, r3, #31
 8004152:	bf44      	itt	mi
 8004154:	f043 0320 	orrmi.w	r3, r3, #32
 8004158:	6023      	strmi	r3, [r4, #0]
 800415a:	b91d      	cbnz	r5, 8004164 <_printf_i+0x198>
 800415c:	6823      	ldr	r3, [r4, #0]
 800415e:	f023 0320 	bic.w	r3, r3, #32
 8004162:	6023      	str	r3, [r4, #0]
 8004164:	2310      	movs	r3, #16
 8004166:	e7af      	b.n	80040c8 <_printf_i+0xfc>
 8004168:	6823      	ldr	r3, [r4, #0]
 800416a:	f043 0320 	orr.w	r3, r3, #32
 800416e:	6023      	str	r3, [r4, #0]
 8004170:	2378      	movs	r3, #120	; 0x78
 8004172:	4828      	ldr	r0, [pc, #160]	; (8004214 <_printf_i+0x248>)
 8004174:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004178:	e7e3      	b.n	8004142 <_printf_i+0x176>
 800417a:	065e      	lsls	r6, r3, #25
 800417c:	bf48      	it	mi
 800417e:	b2ad      	uxthmi	r5, r5
 8004180:	e7e6      	b.n	8004150 <_printf_i+0x184>
 8004182:	4616      	mov	r6, r2
 8004184:	e7bb      	b.n	80040fe <_printf_i+0x132>
 8004186:	680b      	ldr	r3, [r1, #0]
 8004188:	6826      	ldr	r6, [r4, #0]
 800418a:	1d1d      	adds	r5, r3, #4
 800418c:	6960      	ldr	r0, [r4, #20]
 800418e:	600d      	str	r5, [r1, #0]
 8004190:	0635      	lsls	r5, r6, #24
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	d501      	bpl.n	800419a <_printf_i+0x1ce>
 8004196:	6018      	str	r0, [r3, #0]
 8004198:	e002      	b.n	80041a0 <_printf_i+0x1d4>
 800419a:	0671      	lsls	r1, r6, #25
 800419c:	d5fb      	bpl.n	8004196 <_printf_i+0x1ca>
 800419e:	8018      	strh	r0, [r3, #0]
 80041a0:	2300      	movs	r3, #0
 80041a2:	4616      	mov	r6, r2
 80041a4:	6123      	str	r3, [r4, #16]
 80041a6:	e7ba      	b.n	800411e <_printf_i+0x152>
 80041a8:	680b      	ldr	r3, [r1, #0]
 80041aa:	1d1a      	adds	r2, r3, #4
 80041ac:	600a      	str	r2, [r1, #0]
 80041ae:	681e      	ldr	r6, [r3, #0]
 80041b0:	2100      	movs	r1, #0
 80041b2:	4630      	mov	r0, r6
 80041b4:	6862      	ldr	r2, [r4, #4]
 80041b6:	f000 f82f 	bl	8004218 <memchr>
 80041ba:	b108      	cbz	r0, 80041c0 <_printf_i+0x1f4>
 80041bc:	1b80      	subs	r0, r0, r6
 80041be:	6060      	str	r0, [r4, #4]
 80041c0:	6863      	ldr	r3, [r4, #4]
 80041c2:	6123      	str	r3, [r4, #16]
 80041c4:	2300      	movs	r3, #0
 80041c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041ca:	e7a8      	b.n	800411e <_printf_i+0x152>
 80041cc:	4632      	mov	r2, r6
 80041ce:	4649      	mov	r1, r9
 80041d0:	4640      	mov	r0, r8
 80041d2:	6923      	ldr	r3, [r4, #16]
 80041d4:	47d0      	blx	sl
 80041d6:	3001      	adds	r0, #1
 80041d8:	d0ab      	beq.n	8004132 <_printf_i+0x166>
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	079b      	lsls	r3, r3, #30
 80041de:	d413      	bmi.n	8004208 <_printf_i+0x23c>
 80041e0:	68e0      	ldr	r0, [r4, #12]
 80041e2:	9b03      	ldr	r3, [sp, #12]
 80041e4:	4298      	cmp	r0, r3
 80041e6:	bfb8      	it	lt
 80041e8:	4618      	movlt	r0, r3
 80041ea:	e7a4      	b.n	8004136 <_printf_i+0x16a>
 80041ec:	2301      	movs	r3, #1
 80041ee:	4632      	mov	r2, r6
 80041f0:	4649      	mov	r1, r9
 80041f2:	4640      	mov	r0, r8
 80041f4:	47d0      	blx	sl
 80041f6:	3001      	adds	r0, #1
 80041f8:	d09b      	beq.n	8004132 <_printf_i+0x166>
 80041fa:	3501      	adds	r5, #1
 80041fc:	68e3      	ldr	r3, [r4, #12]
 80041fe:	9903      	ldr	r1, [sp, #12]
 8004200:	1a5b      	subs	r3, r3, r1
 8004202:	42ab      	cmp	r3, r5
 8004204:	dcf2      	bgt.n	80041ec <_printf_i+0x220>
 8004206:	e7eb      	b.n	80041e0 <_printf_i+0x214>
 8004208:	2500      	movs	r5, #0
 800420a:	f104 0619 	add.w	r6, r4, #25
 800420e:	e7f5      	b.n	80041fc <_printf_i+0x230>
 8004210:	08004606 	.word	0x08004606
 8004214:	08004617 	.word	0x08004617

08004218 <memchr>:
 8004218:	4603      	mov	r3, r0
 800421a:	b510      	push	{r4, lr}
 800421c:	b2c9      	uxtb	r1, r1
 800421e:	4402      	add	r2, r0
 8004220:	4293      	cmp	r3, r2
 8004222:	4618      	mov	r0, r3
 8004224:	d101      	bne.n	800422a <memchr+0x12>
 8004226:	2000      	movs	r0, #0
 8004228:	e003      	b.n	8004232 <memchr+0x1a>
 800422a:	7804      	ldrb	r4, [r0, #0]
 800422c:	3301      	adds	r3, #1
 800422e:	428c      	cmp	r4, r1
 8004230:	d1f6      	bne.n	8004220 <memchr+0x8>
 8004232:	bd10      	pop	{r4, pc}

08004234 <memcpy>:
 8004234:	440a      	add	r2, r1
 8004236:	4291      	cmp	r1, r2
 8004238:	f100 33ff 	add.w	r3, r0, #4294967295
 800423c:	d100      	bne.n	8004240 <memcpy+0xc>
 800423e:	4770      	bx	lr
 8004240:	b510      	push	{r4, lr}
 8004242:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004246:	4291      	cmp	r1, r2
 8004248:	f803 4f01 	strb.w	r4, [r3, #1]!
 800424c:	d1f9      	bne.n	8004242 <memcpy+0xe>
 800424e:	bd10      	pop	{r4, pc}

08004250 <memmove>:
 8004250:	4288      	cmp	r0, r1
 8004252:	b510      	push	{r4, lr}
 8004254:	eb01 0402 	add.w	r4, r1, r2
 8004258:	d902      	bls.n	8004260 <memmove+0x10>
 800425a:	4284      	cmp	r4, r0
 800425c:	4623      	mov	r3, r4
 800425e:	d807      	bhi.n	8004270 <memmove+0x20>
 8004260:	1e43      	subs	r3, r0, #1
 8004262:	42a1      	cmp	r1, r4
 8004264:	d008      	beq.n	8004278 <memmove+0x28>
 8004266:	f811 2b01 	ldrb.w	r2, [r1], #1
 800426a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800426e:	e7f8      	b.n	8004262 <memmove+0x12>
 8004270:	4601      	mov	r1, r0
 8004272:	4402      	add	r2, r0
 8004274:	428a      	cmp	r2, r1
 8004276:	d100      	bne.n	800427a <memmove+0x2a>
 8004278:	bd10      	pop	{r4, pc}
 800427a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800427e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004282:	e7f7      	b.n	8004274 <memmove+0x24>

08004284 <_free_r>:
 8004284:	b538      	push	{r3, r4, r5, lr}
 8004286:	4605      	mov	r5, r0
 8004288:	2900      	cmp	r1, #0
 800428a:	d043      	beq.n	8004314 <_free_r+0x90>
 800428c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004290:	1f0c      	subs	r4, r1, #4
 8004292:	2b00      	cmp	r3, #0
 8004294:	bfb8      	it	lt
 8004296:	18e4      	addlt	r4, r4, r3
 8004298:	f000 f8d0 	bl	800443c <__malloc_lock>
 800429c:	4a1e      	ldr	r2, [pc, #120]	; (8004318 <_free_r+0x94>)
 800429e:	6813      	ldr	r3, [r2, #0]
 80042a0:	4610      	mov	r0, r2
 80042a2:	b933      	cbnz	r3, 80042b2 <_free_r+0x2e>
 80042a4:	6063      	str	r3, [r4, #4]
 80042a6:	6014      	str	r4, [r2, #0]
 80042a8:	4628      	mov	r0, r5
 80042aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042ae:	f000 b8cb 	b.w	8004448 <__malloc_unlock>
 80042b2:	42a3      	cmp	r3, r4
 80042b4:	d90a      	bls.n	80042cc <_free_r+0x48>
 80042b6:	6821      	ldr	r1, [r4, #0]
 80042b8:	1862      	adds	r2, r4, r1
 80042ba:	4293      	cmp	r3, r2
 80042bc:	bf01      	itttt	eq
 80042be:	681a      	ldreq	r2, [r3, #0]
 80042c0:	685b      	ldreq	r3, [r3, #4]
 80042c2:	1852      	addeq	r2, r2, r1
 80042c4:	6022      	streq	r2, [r4, #0]
 80042c6:	6063      	str	r3, [r4, #4]
 80042c8:	6004      	str	r4, [r0, #0]
 80042ca:	e7ed      	b.n	80042a8 <_free_r+0x24>
 80042cc:	461a      	mov	r2, r3
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	b10b      	cbz	r3, 80042d6 <_free_r+0x52>
 80042d2:	42a3      	cmp	r3, r4
 80042d4:	d9fa      	bls.n	80042cc <_free_r+0x48>
 80042d6:	6811      	ldr	r1, [r2, #0]
 80042d8:	1850      	adds	r0, r2, r1
 80042da:	42a0      	cmp	r0, r4
 80042dc:	d10b      	bne.n	80042f6 <_free_r+0x72>
 80042de:	6820      	ldr	r0, [r4, #0]
 80042e0:	4401      	add	r1, r0
 80042e2:	1850      	adds	r0, r2, r1
 80042e4:	4283      	cmp	r3, r0
 80042e6:	6011      	str	r1, [r2, #0]
 80042e8:	d1de      	bne.n	80042a8 <_free_r+0x24>
 80042ea:	6818      	ldr	r0, [r3, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	4401      	add	r1, r0
 80042f0:	6011      	str	r1, [r2, #0]
 80042f2:	6053      	str	r3, [r2, #4]
 80042f4:	e7d8      	b.n	80042a8 <_free_r+0x24>
 80042f6:	d902      	bls.n	80042fe <_free_r+0x7a>
 80042f8:	230c      	movs	r3, #12
 80042fa:	602b      	str	r3, [r5, #0]
 80042fc:	e7d4      	b.n	80042a8 <_free_r+0x24>
 80042fe:	6820      	ldr	r0, [r4, #0]
 8004300:	1821      	adds	r1, r4, r0
 8004302:	428b      	cmp	r3, r1
 8004304:	bf01      	itttt	eq
 8004306:	6819      	ldreq	r1, [r3, #0]
 8004308:	685b      	ldreq	r3, [r3, #4]
 800430a:	1809      	addeq	r1, r1, r0
 800430c:	6021      	streq	r1, [r4, #0]
 800430e:	6063      	str	r3, [r4, #4]
 8004310:	6054      	str	r4, [r2, #4]
 8004312:	e7c9      	b.n	80042a8 <_free_r+0x24>
 8004314:	bd38      	pop	{r3, r4, r5, pc}
 8004316:	bf00      	nop
 8004318:	20000118 	.word	0x20000118

0800431c <_malloc_r>:
 800431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431e:	1ccd      	adds	r5, r1, #3
 8004320:	f025 0503 	bic.w	r5, r5, #3
 8004324:	3508      	adds	r5, #8
 8004326:	2d0c      	cmp	r5, #12
 8004328:	bf38      	it	cc
 800432a:	250c      	movcc	r5, #12
 800432c:	2d00      	cmp	r5, #0
 800432e:	4606      	mov	r6, r0
 8004330:	db01      	blt.n	8004336 <_malloc_r+0x1a>
 8004332:	42a9      	cmp	r1, r5
 8004334:	d903      	bls.n	800433e <_malloc_r+0x22>
 8004336:	230c      	movs	r3, #12
 8004338:	6033      	str	r3, [r6, #0]
 800433a:	2000      	movs	r0, #0
 800433c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800433e:	f000 f87d 	bl	800443c <__malloc_lock>
 8004342:	4921      	ldr	r1, [pc, #132]	; (80043c8 <_malloc_r+0xac>)
 8004344:	680a      	ldr	r2, [r1, #0]
 8004346:	4614      	mov	r4, r2
 8004348:	b99c      	cbnz	r4, 8004372 <_malloc_r+0x56>
 800434a:	4f20      	ldr	r7, [pc, #128]	; (80043cc <_malloc_r+0xb0>)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	b923      	cbnz	r3, 800435a <_malloc_r+0x3e>
 8004350:	4621      	mov	r1, r4
 8004352:	4630      	mov	r0, r6
 8004354:	f000 f862 	bl	800441c <_sbrk_r>
 8004358:	6038      	str	r0, [r7, #0]
 800435a:	4629      	mov	r1, r5
 800435c:	4630      	mov	r0, r6
 800435e:	f000 f85d 	bl	800441c <_sbrk_r>
 8004362:	1c43      	adds	r3, r0, #1
 8004364:	d123      	bne.n	80043ae <_malloc_r+0x92>
 8004366:	230c      	movs	r3, #12
 8004368:	4630      	mov	r0, r6
 800436a:	6033      	str	r3, [r6, #0]
 800436c:	f000 f86c 	bl	8004448 <__malloc_unlock>
 8004370:	e7e3      	b.n	800433a <_malloc_r+0x1e>
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	1b5b      	subs	r3, r3, r5
 8004376:	d417      	bmi.n	80043a8 <_malloc_r+0x8c>
 8004378:	2b0b      	cmp	r3, #11
 800437a:	d903      	bls.n	8004384 <_malloc_r+0x68>
 800437c:	6023      	str	r3, [r4, #0]
 800437e:	441c      	add	r4, r3
 8004380:	6025      	str	r5, [r4, #0]
 8004382:	e004      	b.n	800438e <_malloc_r+0x72>
 8004384:	6863      	ldr	r3, [r4, #4]
 8004386:	42a2      	cmp	r2, r4
 8004388:	bf0c      	ite	eq
 800438a:	600b      	streq	r3, [r1, #0]
 800438c:	6053      	strne	r3, [r2, #4]
 800438e:	4630      	mov	r0, r6
 8004390:	f000 f85a 	bl	8004448 <__malloc_unlock>
 8004394:	f104 000b 	add.w	r0, r4, #11
 8004398:	1d23      	adds	r3, r4, #4
 800439a:	f020 0007 	bic.w	r0, r0, #7
 800439e:	1ac2      	subs	r2, r0, r3
 80043a0:	d0cc      	beq.n	800433c <_malloc_r+0x20>
 80043a2:	1a1b      	subs	r3, r3, r0
 80043a4:	50a3      	str	r3, [r4, r2]
 80043a6:	e7c9      	b.n	800433c <_malloc_r+0x20>
 80043a8:	4622      	mov	r2, r4
 80043aa:	6864      	ldr	r4, [r4, #4]
 80043ac:	e7cc      	b.n	8004348 <_malloc_r+0x2c>
 80043ae:	1cc4      	adds	r4, r0, #3
 80043b0:	f024 0403 	bic.w	r4, r4, #3
 80043b4:	42a0      	cmp	r0, r4
 80043b6:	d0e3      	beq.n	8004380 <_malloc_r+0x64>
 80043b8:	1a21      	subs	r1, r4, r0
 80043ba:	4630      	mov	r0, r6
 80043bc:	f000 f82e 	bl	800441c <_sbrk_r>
 80043c0:	3001      	adds	r0, #1
 80043c2:	d1dd      	bne.n	8004380 <_malloc_r+0x64>
 80043c4:	e7cf      	b.n	8004366 <_malloc_r+0x4a>
 80043c6:	bf00      	nop
 80043c8:	20000118 	.word	0x20000118
 80043cc:	2000011c 	.word	0x2000011c

080043d0 <_realloc_r>:
 80043d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043d2:	4607      	mov	r7, r0
 80043d4:	4614      	mov	r4, r2
 80043d6:	460e      	mov	r6, r1
 80043d8:	b921      	cbnz	r1, 80043e4 <_realloc_r+0x14>
 80043da:	4611      	mov	r1, r2
 80043dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80043e0:	f7ff bf9c 	b.w	800431c <_malloc_r>
 80043e4:	b922      	cbnz	r2, 80043f0 <_realloc_r+0x20>
 80043e6:	f7ff ff4d 	bl	8004284 <_free_r>
 80043ea:	4625      	mov	r5, r4
 80043ec:	4628      	mov	r0, r5
 80043ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043f0:	f000 f830 	bl	8004454 <_malloc_usable_size_r>
 80043f4:	42a0      	cmp	r0, r4
 80043f6:	d20f      	bcs.n	8004418 <_realloc_r+0x48>
 80043f8:	4621      	mov	r1, r4
 80043fa:	4638      	mov	r0, r7
 80043fc:	f7ff ff8e 	bl	800431c <_malloc_r>
 8004400:	4605      	mov	r5, r0
 8004402:	2800      	cmp	r0, #0
 8004404:	d0f2      	beq.n	80043ec <_realloc_r+0x1c>
 8004406:	4631      	mov	r1, r6
 8004408:	4622      	mov	r2, r4
 800440a:	f7ff ff13 	bl	8004234 <memcpy>
 800440e:	4631      	mov	r1, r6
 8004410:	4638      	mov	r0, r7
 8004412:	f7ff ff37 	bl	8004284 <_free_r>
 8004416:	e7e9      	b.n	80043ec <_realloc_r+0x1c>
 8004418:	4635      	mov	r5, r6
 800441a:	e7e7      	b.n	80043ec <_realloc_r+0x1c>

0800441c <_sbrk_r>:
 800441c:	b538      	push	{r3, r4, r5, lr}
 800441e:	2300      	movs	r3, #0
 8004420:	4d05      	ldr	r5, [pc, #20]	; (8004438 <_sbrk_r+0x1c>)
 8004422:	4604      	mov	r4, r0
 8004424:	4608      	mov	r0, r1
 8004426:	602b      	str	r3, [r5, #0]
 8004428:	f7fc fd0a 	bl	8000e40 <_sbrk>
 800442c:	1c43      	adds	r3, r0, #1
 800442e:	d102      	bne.n	8004436 <_sbrk_r+0x1a>
 8004430:	682b      	ldr	r3, [r5, #0]
 8004432:	b103      	cbz	r3, 8004436 <_sbrk_r+0x1a>
 8004434:	6023      	str	r3, [r4, #0]
 8004436:	bd38      	pop	{r3, r4, r5, pc}
 8004438:	2000028c 	.word	0x2000028c

0800443c <__malloc_lock>:
 800443c:	4801      	ldr	r0, [pc, #4]	; (8004444 <__malloc_lock+0x8>)
 800443e:	f000 b811 	b.w	8004464 <__retarget_lock_acquire_recursive>
 8004442:	bf00      	nop
 8004444:	20000294 	.word	0x20000294

08004448 <__malloc_unlock>:
 8004448:	4801      	ldr	r0, [pc, #4]	; (8004450 <__malloc_unlock+0x8>)
 800444a:	f000 b80c 	b.w	8004466 <__retarget_lock_release_recursive>
 800444e:	bf00      	nop
 8004450:	20000294 	.word	0x20000294

08004454 <_malloc_usable_size_r>:
 8004454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004458:	1f18      	subs	r0, r3, #4
 800445a:	2b00      	cmp	r3, #0
 800445c:	bfbc      	itt	lt
 800445e:	580b      	ldrlt	r3, [r1, r0]
 8004460:	18c0      	addlt	r0, r0, r3
 8004462:	4770      	bx	lr

08004464 <__retarget_lock_acquire_recursive>:
 8004464:	4770      	bx	lr

08004466 <__retarget_lock_release_recursive>:
 8004466:	4770      	bx	lr

08004468 <_init>:
 8004468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446a:	bf00      	nop
 800446c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800446e:	bc08      	pop	{r3}
 8004470:	469e      	mov	lr, r3
 8004472:	4770      	bx	lr

08004474 <_fini>:
 8004474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004476:	bf00      	nop
 8004478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800447a:	bc08      	pop	{r3}
 800447c:	469e      	mov	lr, r3
 800447e:	4770      	bx	lr
